"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _yargs = require("yargs");

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _logger = require("./logger");

var _logger2 = _interopRequireDefault(_logger);

var _settings = require("./settings");

var _settings2 = _interopRequireDefault(_settings);

var _guid = require("./util/guid");

var _guid2 = _interopRequireDefault(_guid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _loadConfig = function _loadConfig(filename) {
  var filepath = _path2.default.resolve(process.cwd() + _path2.default.sep + filename);
  try {
    /*eslint-disable global-require*/
    var config = require(filepath);
    _logger2.default.log("Loaded config file " + filename);
    _logger2.default.debug("Loading config from " + filename + ":");
    _logger2.default.debug("" + JSON.stringify(config));
    return _lodash2.default.cloneDeep(config);
  } catch (err) {
    _logger2.default.err("Cannot load config file from " + filename);
    _logger2.default.err(err);
    throw new Error(err);
  }
};

exports.default = {
  getConfig: function getConfig() {
    return _settings2.default.config;
  },

  /*eslint-disable complexity*/
  validateConfig: function validateConfig(opts) {
    var argvMock = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var envMock = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    var runArgv = _yargs.argv;
    var env = process.env;

    if (argvMock) {
      runArgv = argvMock;
    }

    if (envMock) {
      env = envMock;
    }

    if (runArgv.sauce_tunnel_config) {
      _settings2.default.config.tunnel = _loadConfig(runArgv.sauce_tunnel_config);
    }

    // override sauce configurations from default source
    // required:
    if (env.SAUCE_USERNAME) {
      _settings2.default.config.tunnel.username = env.SAUCE_USERNAME;
    }

    if (env.SAUCE_ACCESS_KEY) {
      _settings2.default.config.tunnel.accessKey = env.SAUCE_ACCESS_KEY;
    }

    if (env.SAUCE_CONNECT_VERSION) {
      _settings2.default.config.tunnel.connectVersion = env.SAUCE_CONNECT_VERSION;
    }
    // optional:
    if (runArgv.sauce_tunnel_id) {
      _settings2.default.config.tunnel.tunnelIdentifier = runArgv.sauce_tunnel_id;
    }

    // optional:
    if (runArgv.sauce_app) {
      _settings2.default.config.app = runArgv.sauce_app;
    }

    // optional:
    if (runArgv.sauce_app_capabilities_config) {
      _settings2.default.config.appCapabilitiesConfig = _loadConfig(runArgv.sauce_app_capabilities_config);
    }

    // optional: *Outbound* HTTP Sauce-specific proxy configuration. Note
    // that this is for Selenium outbound control traffic only, not the
    // return path, and not to be confused with sauceconnect.
    if (env.SAUCE_OUTBOUND_PROXY) {
      _settings2.default.config.sauceOutboundProxy = env.SAUCE_OUTBOUND_PROXY;
    }

    if (env.SAUCE_TUNNEL_FAST_FAIL_REGEXPS && !_settings2.default.config.tunnel.fastFailRegexps) {
      // only if fastFailRegexps isn't set anywhere
      _settings2.default.config.tunnel.fastFailRegexps = env.SAUCE_TUNNEL_FAST_FAIL_REGEXPS;
    }

    if (runArgv.shared_sauce_parent_account) {
      _settings2.default.config.sharedSauceParentAccount = runArgv.shared_sauce_parent_account;
    }

    if (runArgv.sauce_create_tunnels) {
      _settings2.default.config.useTunnels = !!runArgv.sauce_create_tunnels;
    }

    // locks config
    _settings2.default.config.locksServerLocation = env.LOCKS_SERVER;

    // Remove trailing / in locks server location if it's present.
    if (typeof _settings2.default.config.locksServerLocation === "string" && _settings2.default.config.locksServerLocation.length > 0) {
      if (_settings2.default.config.locksServerLocation.charAt(_settings2.default.config.locksServerLocation.length - 1) === "/") {
        _settings2.default.config.locksServerLocation = _settings2.default.config.locksServerLocation.substr(0, _settings2.default.config.locksServerLocation.length - 1);
      }
    }

    var parameterWarnings = {
      username: {
        required: true,
        envKey: "SAUCE_USERNAME"
      },
      accessKey: {
        required: true,
        envKey: "SAUCE_ACCESS_KEY"
      },
      connectVersion: {
        required: false,
        envKey: "SAUCE_CONNECT_VERSION"
      }
    };

    // Validate configuration if we have --sauce
    if (runArgv.sauce_browsers || runArgv.sauce_browser || opts.isEnabled) {
      var valid = true;

      _lodash2.default.forEach(parameterWarnings, function (v, k) {
        if (!_settings2.default.config.tunnel[k]) {
          if (v.required) {
            _logger2.default.err("Error! Sauce requires " + k + " to be set. Check if the" + (" environment variable $" + v.envKey + " is defined."));
            valid = false;
          } else {
            _logger2.default.warn("Warning! No " + k + " is set. This is set via the" + (" environment variable $" + v.envKey + " . This isn't required, but can cause ") + "problems with Sauce if not set");
          }
        }
      });

      if (!valid) {
        throw new Error("Missing configuration for Saucelabs connection.");
      }

      if (runArgv.sauce_create_tunnels) {
        if (runArgv.sauce_tunnel_id) {
          throw new Error("Only one Saucelabs tunnel arg is allowed, --sauce_tunnel_id " + "or --create_tunnels.");
        }

        if (runArgv.shared_sauce_parent_account) {
          throw new Error("--shared_sauce_parent_account only works with --sauce_tunnel_id.");
        }
      }

      // after verification we want to add sauce_tunnel_id if it's null till now
      if (!_settings2.default.config.tunnel.tunnelIdentifier && _settings2.default.config.useTunnels) {
        // auto generate tunnel id
        _settings2.default.config.tunnel.tunnelIdentifier = (0, _guid2.default)();
      }

      _logger2.default.debug("Sauce configuration: ");
      _logger2.default.debug(JSON.stringify(_settings2.default.config));

      _logger2.default.log("Sauce configuration OK");
    }

    return _settings2.default.config;
  }
};
//# sourceMappingURL=configuration.js.map