{"version":3,"sources":["../src/configuration.js"],"names":["_loadConfig","filename","filepath","path","resolve","process","cwd","sep","config","require","logger","log","debug","JSON","stringify","_","cloneDeep","err","Error","getConfig","settings","validateConfig","opts","argvMock","envMock","runArgv","argv","env","sauce_tunnel_config","tunnel","SAUCE_USERNAME","username","SAUCE_ACCESS_KEY","accessKey","SAUCE_CONNECT_VERSION","connectVersion","sauce_tunnel_id","tunnelIdentifier","sauce_app","app","sauce_app_capabilities_config","appCapabilitiesConfig","SAUCE_OUTBOUND_PROXY","sauceOutboundProxy","SAUCE_TUNNEL_FAST_FAIL_REGEXPS","fastFailRegexps","shared_sauce_parent_account","sharedSauceParentAccount","sauce_create_tunnels","useTunnels","locksServerLocation","LOCKS_SERVER","length","charAt","substr","parameterWarnings","required","envKey","sauce_browsers","sauce_browser","isEnabled","valid","forEach","v","k","warn"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,cAAc,SAAdA,WAAc,CAACC,QAAD,EAAc;AAChC,MAAMC,WAAWC,eAAKC,OAAL,CAAaC,QAAQC,GAAR,KAAgBH,eAAKI,GAArB,GAA2BN,QAAxC,CAAjB;AACA,MAAI;AACF;AACA,QAAMO,SAASC,QAAQP,QAAR,CAAf;AACAQ,qBAAOC,GAAP,yBAAiCV,QAAjC;AACAS,qBAAOE,KAAP,0BAAoCX,QAApC;AACAS,qBAAOE,KAAP,MAAgBC,KAAKC,SAAL,CAAeN,MAAf,CAAhB;AACA,WAAOO,iBAAEC,SAAF,CAAYR,MAAZ,CAAP;AACD,GAPD,CAOE,OAAOS,GAAP,EAAY;AACZP,qBAAOO,GAAP,mCAA2ChB,QAA3C;AACAS,qBAAOO,GAAP,CAAWA,GAAX;AACA,UAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACD;AACF,CAdD;;kBAgBe;AACbE,aAAW,qBAAM;AACf,WAAOC,mBAASZ,MAAhB;AACD,GAHY;;AAKb;AACAa,kBAAgB,wBAACC,IAAD,EAA2C;AAAA,QAApCC,QAAoC,uEAAzB,IAAyB;AAAA,QAAnBC,OAAmB,uEAAT,IAAS;;AACzD,QAAIC,UAAUC,WAAd;AACA,QAAIC,MAAMtB,QAAQsB,GAAlB;;AAEA,QAAIJ,QAAJ,EAAc;AACZE,gBAAUF,QAAV;AACD;;AAED,QAAIC,OAAJ,EAAa;AACXG,YAAMH,OAAN;AACD;;AAED,QAAIC,QAAQG,mBAAZ,EAAiC;AAC/BR,yBAASZ,MAAT,CAAgBqB,MAAhB,GAAyB7B,YAAYyB,QAAQG,mBAApB,CAAzB;AACD;;AAED;AACA;AACA,QAAID,IAAIG,cAAR,EAAwB;AACtBV,yBAASZ,MAAT,CAAgBqB,MAAhB,CAAuBE,QAAvB,GAAkCJ,IAAIG,cAAtC;AACD;;AAED,QAAIH,IAAIK,gBAAR,EAA0B;AACxBZ,yBAASZ,MAAT,CAAgBqB,MAAhB,CAAuBI,SAAvB,GAAmCN,IAAIK,gBAAvC;AACD;;AAED,QAAIL,IAAIO,qBAAR,EAA+B;AAC7Bd,yBAASZ,MAAT,CAAgBqB,MAAhB,CAAuBM,cAAvB,GAAwCR,IAAIO,qBAA5C;AACD;AACD;AACA,QAAIT,QAAQW,eAAZ,EAA6B;AAC3BhB,yBAASZ,MAAT,CAAgBqB,MAAhB,CAAuBQ,gBAAvB,GAA0CZ,QAAQW,eAAlD;AACD;;AAED;AACA,QAAIX,QAAQa,SAAZ,EAAuB;AACrBlB,yBAASZ,MAAT,CAAgB+B,GAAhB,GAAsBd,QAAQa,SAA9B;AACD;;AAED;AACA,QAAIb,QAAQe,6BAAZ,EAA2C;AACzCpB,yBAASZ,MAAT,CAAgBiC,qBAAhB,GAAwCzC,YAAYyB,QAAQe,6BAApB,CAAxC;AACD;;AAED;AACA;AACA;AACA,QAAIb,IAAIe,oBAAR,EAA8B;AAC5BtB,yBAASZ,MAAT,CAAgBmC,kBAAhB,GAAqChB,IAAIe,oBAAzC;AACD;;AAED,QAAIf,IAAIiB,8BAAJ,IACC,CAACxB,mBAASZ,MAAT,CAAgBqB,MAAhB,CAAuBgB,eAD7B,EAC8C;AAC5C;AACAzB,yBAASZ,MAAT,CAAgBqB,MAAhB,CAAuBgB,eAAvB,GAAyClB,IAAIiB,8BAA7C;AACD;;AAED,QAAInB,QAAQqB,2BAAZ,EAAyC;AACvC1B,yBAASZ,MAAT,CAAgBuC,wBAAhB,GAA2CtB,QAAQqB,2BAAnD;AACD;;AAED,QAAIrB,QAAQuB,oBAAZ,EAAkC;AAChC5B,yBAASZ,MAAT,CAAgByC,UAAhB,GAA6B,CAAC,CAACxB,QAAQuB,oBAAvC;AACD;;AAED;AACA5B,uBAASZ,MAAT,CAAgB0C,mBAAhB,GAAsCvB,IAAIwB,YAA1C;;AAEA;AACA,QAAI,OAAO/B,mBAASZ,MAAT,CAAgB0C,mBAAvB,KAA+C,QAA/C,IACC9B,mBAASZ,MAAT,CAAgB0C,mBAAhB,CAAoCE,MAApC,GAA6C,CADlD,EACqD;AACnD,UAAIhC,mBAASZ,MAAT,CAAgB0C,mBAAhB,CAAoCG,MAApC,CACFjC,mBAASZ,MAAT,CAAgB0C,mBAAhB,CAAoCE,MAApC,GAA6C,CAD3C,MACkD,GADtD,EAC2D;AACzDhC,2BAASZ,MAAT,CAAgB0C,mBAAhB,GAAsC9B,mBAASZ,MAAT,CAAgB0C,mBAAhB,CAAoCI,MAApC,CAA2C,CAA3C,EACpClC,mBAASZ,MAAT,CAAgB0C,mBAAhB,CAAoCE,MAApC,GAA6C,CADT,CAAtC;AAED;AACF;;AAED,QAAMG,oBAAoB;AACxBxB,gBAAU;AACRyB,kBAAU,IADF;AAERC,gBAAQ;AAFA,OADc;AAKxBxB,iBAAW;AACTuB,kBAAU,IADD;AAETC,gBAAQ;AAFC,OALa;AASxBtB,sBAAgB;AACdqB,kBAAU,KADI;AAEdC,gBAAQ;AAFM;AATQ,KAA1B;;AAeA;AACA,QAAIhC,QAAQiC,cAAR,IACCjC,QAAQkC,aADT,IAECrC,KAAKsC,SAFV,EAEqB;AACnB,UAAIC,QAAQ,IAAZ;;AAEA9C,uBAAE+C,OAAF,CAAUP,iBAAV,EAA6B,UAACQ,CAAD,EAAIC,CAAJ,EAAU;AACrC,YAAI,CAAC5C,mBAASZ,MAAT,CAAgBqB,MAAhB,CAAuBmC,CAAvB,CAAL,EAAgC;AAC9B,cAAID,EAAEP,QAAN,EAAgB;AACd9C,6BAAOO,GAAP,CAAW,2BAAyB+C,CAAzB,6DACmBD,EAAEN,MADrB,kBAAX;AAEAI,oBAAQ,KAAR;AACD,WAJD,MAIO;AACLnD,6BAAOuD,IAAP,CAAY,iBAAeD,CAAf,iEACkBD,EAAEN,MADpB,+CAER,gCAFJ;AAGD;AACF;AACF,OAZD;;AAcA,UAAI,CAACI,KAAL,EAAY;AACV,cAAM,IAAI3C,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAED,UAAIO,QAAQuB,oBAAZ,EAAkC;AAChC,YAAIvB,QAAQW,eAAZ,EAA6B;AAC3B,gBAAM,IAAIlB,KAAJ,CAAU,iEACd,sBADI,CAAN;AAED;;AAED,YAAIO,QAAQqB,2BAAZ,EAAyC;AACvC,gBAAM,IAAI5B,KAAJ,CAAU,kEAAV,CAAN;AACD;AACF;;AAED;AACA,UAAI,CAACE,mBAASZ,MAAT,CAAgBqB,MAAhB,CAAuBQ,gBAAxB,IAA4CjB,mBAASZ,MAAT,CAAgByC,UAAhE,EAA4E;AAC1E;AACA7B,2BAASZ,MAAT,CAAgBqB,MAAhB,CAAuBQ,gBAAvB,GAA0C,qBAA1C;AACD;;AAED3B,uBAAOE,KAAP,CAAa,uBAAb;AACAF,uBAAOE,KAAP,CAAaC,KAAKC,SAAL,CAAeM,mBAASZ,MAAxB,CAAb;;AAEAE,uBAAOC,GAAP,CAAW,wBAAX;AAED;;AAED,WAAOS,mBAASZ,MAAhB;AACD;AApJY,C","file":"configuration.js","sourcesContent":["import { argv } from \"yargs\";\nimport _ from \"lodash\";\nimport path from \"path\";\nimport logger from \"./logger\";\nimport settings from \"./settings\";\nimport guid from \"./util/guid\";\n\nconst _loadConfig = (filename) => {\n  const filepath = path.resolve(process.cwd() + path.sep + filename);\n  try {\n    /*eslint-disable global-require*/\n    const config = require(filepath);\n    logger.log(`Loaded config file ${filename}`);\n    logger.debug(`Loading config from ${filename}:`);\n    logger.debug(`${JSON.stringify(config)}`);\n    return _.cloneDeep(config);\n  } catch (err) {\n    logger.err(`Cannot load config file from ${filename}`);\n    logger.err(err);\n    throw new Error(err);\n  }\n};\n\nexport default {\n  getConfig: () => {\n    return settings.config;\n  },\n\n  /*eslint-disable complexity*/\n  validateConfig: (opts, argvMock = null, envMock = null) => {\n    let runArgv = argv;\n    let env = process.env;\n\n    if (argvMock) {\n      runArgv = argvMock;\n    }\n\n    if (envMock) {\n      env = envMock;\n    }\n\n    if (runArgv.sauce_tunnel_config) {\n      settings.config.tunnel = _loadConfig(runArgv.sauce_tunnel_config);\n    }\n\n    // override sauce configurations from default source\n    // required:\n    if (env.SAUCE_USERNAME) {\n      settings.config.tunnel.username = env.SAUCE_USERNAME;\n    }\n\n    if (env.SAUCE_ACCESS_KEY) {\n      settings.config.tunnel.accessKey = env.SAUCE_ACCESS_KEY;\n    }\n\n    if (env.SAUCE_CONNECT_VERSION) {\n      settings.config.tunnel.connectVersion = env.SAUCE_CONNECT_VERSION;\n    }\n    // optional:\n    if (runArgv.sauce_tunnel_id) {\n      settings.config.tunnel.tunnelIdentifier = runArgv.sauce_tunnel_id;\n    }\n\n    // optional:\n    if (runArgv.sauce_app) {\n      settings.config.app = runArgv.sauce_app;\n    }\n\n    // optional:\n    if (runArgv.sauce_app_capabilities_config) {\n      settings.config.appCapabilitiesConfig = _loadConfig(runArgv.sauce_app_capabilities_config);\n    }\n\n    // optional: *Outbound* HTTP Sauce-specific proxy configuration. Note\n    // that this is for Selenium outbound control traffic only, not the\n    // return path, and not to be confused with sauceconnect.\n    if (env.SAUCE_OUTBOUND_PROXY) {\n      settings.config.sauceOutboundProxy = env.SAUCE_OUTBOUND_PROXY;\n    }\n\n    if (env.SAUCE_TUNNEL_FAST_FAIL_REGEXPS\n      && !settings.config.tunnel.fastFailRegexps) {\n      // only if fastFailRegexps isn't set anywhere\n      settings.config.tunnel.fastFailRegexps = env.SAUCE_TUNNEL_FAST_FAIL_REGEXPS;\n    }\n\n    if (runArgv.shared_sauce_parent_account) {\n      settings.config.sharedSauceParentAccount = runArgv.shared_sauce_parent_account;\n    }\n\n    if (runArgv.sauce_create_tunnels) {\n      settings.config.useTunnels = !!runArgv.sauce_create_tunnels;\n    }\n\n    // locks config\n    settings.config.locksServerLocation = env.LOCKS_SERVER;\n\n    // Remove trailing / in locks server location if it's present.\n    if (typeof settings.config.locksServerLocation === \"string\"\n      && settings.config.locksServerLocation.length > 0) {\n      if (settings.config.locksServerLocation.charAt(\n        settings.config.locksServerLocation.length - 1) === \"/\") {\n        settings.config.locksServerLocation = settings.config.locksServerLocation.substr(0,\n          settings.config.locksServerLocation.length - 1);\n      }\n    }\n\n    const parameterWarnings = {\n      username: {\n        required: true,\n        envKey: \"SAUCE_USERNAME\"\n      },\n      accessKey: {\n        required: true,\n        envKey: \"SAUCE_ACCESS_KEY\"\n      },\n      connectVersion: {\n        required: false,\n        envKey: \"SAUCE_CONNECT_VERSION\"\n      }\n    };\n\n    // Validate configuration if we have --sauce\n    if (runArgv.sauce_browsers\n      || runArgv.sauce_browser\n      || opts.isEnabled) {\n      let valid = true;\n\n      _.forEach(parameterWarnings, (v, k) => {\n        if (!settings.config.tunnel[k]) {\n          if (v.required) {\n            logger.err(`Error! Sauce requires ${k} to be set. Check if the`\n              + ` environment variable $${v.envKey} is defined.`);\n            valid = false;\n          } else {\n            logger.warn(`Warning! No ${k} is set. This is set via the`\n              + ` environment variable $${v.envKey} . This isn't required, but can cause `\n              + \"problems with Sauce if not set\");\n          }\n        }\n      });\n\n      if (!valid) {\n        throw new Error(\"Missing configuration for Saucelabs connection.\");\n      }\n\n      if (runArgv.sauce_create_tunnels) {\n        if (runArgv.sauce_tunnel_id) {\n          throw new Error(\"Only one Saucelabs tunnel arg is allowed, --sauce_tunnel_id \" +\n            \"or --create_tunnels.\");\n        }\n\n        if (runArgv.shared_sauce_parent_account) {\n          throw new Error(\"--shared_sauce_parent_account only works with --sauce_tunnel_id.\");\n        }\n      }\n\n      // after verification we want to add sauce_tunnel_id if it's null till now\n      if (!settings.config.tunnel.tunnelIdentifier && settings.config.useTunnels) {\n        // auto generate tunnel id\n        settings.config.tunnel.tunnelIdentifier = guid();\n      }\n\n      logger.debug(\"Sauce configuration: \");\n      logger.debug(JSON.stringify(settings.config));\n\n      logger.log(\"Sauce configuration OK\");\n\n    }\n\n    return settings.config;\n  }\n};\n"]}