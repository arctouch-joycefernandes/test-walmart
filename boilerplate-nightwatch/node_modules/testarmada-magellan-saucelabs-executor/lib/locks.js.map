{"version":3,"sources":["../src/locks.js"],"names":["Locks","options","apiMock","_","assign","locksServerLocation","api","LocksAPI","logger","log","Promise","resolve","reject","connect","err","callback","pollingStartTime","Date","now","poll","debug","claim","error","token","locksOutageTimeout","Error","locksPollingInterval","setTimeout","e","release","close"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;IAEqBA,K;AACnB,iBAAYC,OAAZ,EAAqC;AAAA,QAAhBC,OAAgB,uEAAN,IAAM;;AAAA;;AACnC,SAAKD,OAAL,GAAeE,iBAAEC,MAAF,CAAS,EAAT,EAAaH,OAAb,CAAf;AACA,SAAKC,OAAL,GAAeA,OAAf;AACD;;;;iCAEY;AAAA;;AACX,UAAI,KAAKD,OAAL,CAAaI,mBAAjB,EAAsC;AACpC,aAAKC,GAAL,GAAW,KAAKJ,OAAL,IAAgB,IAAIK,0BAAJ,CAAa,KAAKN,OAAlB,CAA3B;;AAEAO,yBAAOC,GAAP,4BAAoC,KAAKR,OAAL,CAAaI,mBAAjD;;AAGA,eAAO,IAAIK,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,gBAAKN,GAAL,CAASO,OAAT,CAAiB,UAACC,GAAD,EAAS;AACxB,gBAAIA,GAAJ,EAAS;AACPF,qBAAOE,GAAP;AACD,aAFD,MAEO;AACLH;AACD;AACF,WAND;AAOD,SARM,CAAP;AASD,OAfD,MAeO;AACL,eAAOD,QAAQC,OAAR,EAAP;AACD;AACF;;AAED;AACA;AACA;AACA;AACA;;;;4BACQI,Q,EAAU;AAAA;;AAChB,UAAI,CAAC,KAAKT,GAAV,EAAe;AACb,eAAOS,UAAP;AACD;;AAED,UAAMC,mBAAmBC,KAAKC,GAAL,EAAzB;;AAEA,UAAMC,OAAO,SAAPA,IAAO,GAAM;AACjBX,yBAAOY,KAAP,CAAa,iBAAb;;AAEA,YAAI;AACF,iBAAO,OAAKd,GAAL,CAASe,KAAT,CAAe,UAACC,KAAD,EAAQC,KAAR,EAAkB;AACtC;AACA;AACA;AACA;AACA;;AAEA,gBAAID,KAAJ,EAAW;AACTd,+BAAOM,GAAP,kBAAyBG,KAAKC,GAAL,KAAaF,gBAAtC,sCACI,OAAKf,OAAL,CAAauB,kBADjB;AAEA,kBAAIP,KAAKC,GAAL,KAAaF,gBAAb,GAAgC,OAAKf,OAAL,CAAauB,kBAAjD,EAAqE;AACnE;AACA,uBAAOT,SAAS,IAAIU,KAAJ,OAAa,2BACzB,oCADY,IAC2BH,KAD3B,CAAT,CAAP;AAED,eAJD,MAIO;AACLd,iCAAOM,GAAP,OAAc,kDACZ,WADF,IACgB,OAAKb,OAAL,CAAayB,oBAD7B;AAEA,uBAAOC,WAAWR,IAAX,EAAiB,OAAKlB,OAAL,CAAayB,oBAA9B,CAAP;AACD;AACF;;AAED,gBAAIH,KAAJ,EAAW;AACT,qBAAOR,SAAS,IAAT,EAAe,EAAEQ,YAAF,EAAf,CAAP;AACD,aAFD,MAEO;AACLf,+BAAOY,KAAP,CAAa,wEAAb;AACA,qBAAOO,WAAWR,IAAX,EAAiB,OAAKlB,OAAL,CAAayB,oBAA9B,CAAP;AACD;AAEF,WA5BM,CAAP;AA6BD,SA9BD,CA8BE,OAAOE,CAAP,EAAU;AACVpB,2BAAOM,GAAP,CAAW,+DAAX;AACAN,2BAAOM,GAAP,CAAWc,CAAX;AACA,iBAAOb,SAASa,CAAT,CAAP;AACD;AACF,OAtCD;;AAwCA,aAAOT,MAAP;AACD;;;4BAEOI,K,EAAO;AACb,UAAI,CAAC,KAAKjB,GAAV,EAAe;AACb;AACD;AACD,WAAKA,GAAL,CAASuB,OAAT,CAAiBN,KAAjB;AACD;;;+BAEU;AACT,UAAI,CAAC,KAAKjB,GAAV,EAAe;AACb;AACD;AACD,WAAKA,GAAL,CAASwB,KAAT;AACD;;;;;;kBA9FkB9B,K","file":"locks.js","sourcesContent":["import _ from \"lodash\";\nimport logger from \"./logger\";\nimport LocksAPI from \"./locks_socket_api\";\n\nexport default class Locks {\n  constructor(options, apiMock = null) {\n    this.options = _.assign({}, options);\n    this.apiMock = apiMock;\n  }\n\n  initialize() {\n    if (this.options.locksServerLocation) {\n      this.api = this.apiMock || new LocksAPI(this.options);\n\n      logger.log(`Using locks server at ${this.options.locksServerLocation\n        } for VM traffic control.`);\n\n      return new Promise((resolve, reject) => {\n        this.api.connect((err) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      });\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  //\n  // 1) Attempt to claim a VM. If the claim is accepted, return the token.\n  // 2) If rejected or given an error, wait, then try again (poll)\n  // 3) If max polling time is reached, abandon the claim and return an error.\n  //\n  acquire(callback) {\n    if (!this.api) {\n      return callback();\n    }\n\n    const pollingStartTime = Date.now();\n\n    const poll = () => {\n      logger.debug(\"Asking for VM..\");\n\n      try {\n        return this.api.claim((error, token) => {\n          // Three possible outcomes to claims:\n          //\n          // 1) error\n          // 2) accepted claim, token received.\n          // 3) rejected claim, no token received.\n\n          if (error) {\n            logger.err(`waited for ${Date.now() - pollingStartTime} , timeout is\n              ${this.options.locksOutageTimeout}`);\n            if (Date.now() - pollingStartTime > this.options.locksOutageTimeout) {\n              // we've been polling for too long. Bail!\n              return callback(new Error(`${\"Gave up trying to get \"\n                + \"a saucelabs VM from locks server. \"}${error}`));\n            } else {\n              logger.err(`${\"Error from locks server, tolerating error and\" +\n                \" waiting \"}${this.options.locksPollingInterval}ms before trying again`);\n              return setTimeout(poll, this.options.locksPollingInterval);\n            }\n          }\n\n          if (token) {\n            return callback(null, { token });\n          } else {\n            logger.debug(\"Capacity saturated, waiting for clearance to claim next available VM..\");\n            return setTimeout(poll, this.options.locksPollingInterval);\n          }\n\n        });\n      } catch (e) {\n        logger.err(\"Internal exception while trying to claim a VM from Saucelabs:\");\n        logger.err(e);\n        return callback(e);\n      }\n    };\n\n    return poll();\n  }\n\n  release(token) {\n    if (!this.api) {\n      return;\n    }\n    this.api.release(token);\n  }\n\n  teardown() {\n    if (!this.api) {\n      return;\n    }\n    this.api.close();\n  }\n}\n"]}