{"version":3,"sources":["../src/tunnel.js"],"names":["Tunnel","options","sauceConnectLauncherMock","_","assign","sauceConnectLauncher","Promise","resolve","reject","tunnel","username","accessKey","analytics","push","logger","debug","download","err","mark","tunnelInfo","connectFailures","log","tunnelIdentifier","connect","logFilePath","path","settings","tempDir","buildId","sauceOptions","readyFileId","verbose","verboseDebugging","logfile","port","BASE_SELENIUM_PORT_OFFSET","JSON","stringify","sauceConnectProcess","message","indexOf","BAILED","Error","MAX_CONNECT_RETRIES","then","catch","process","close"],"mappings":"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","file":"tunnel.js","sourcesContent":["import sauceConnectLauncher from \"sauce-connect-launcher\";\nimport path from \"path\";\nimport _ from \"lodash\";\nimport logger from \"./logger\";\nimport settings from \"./settings\";\nimport analytics from \"./global_analytics\";\n\nexport default class Tunnel {\n  constructor(options, sauceConnectLauncherMock = null) {\n    this.options = _.assign({}, options);\n    this.sauceConnectLauncher = sauceConnectLauncher;\n\n    if (sauceConnectLauncherMock) {\n      this.sauceConnectLauncher = sauceConnectLauncherMock;\n    }\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      if (!this.options.tunnel.username) {\n        return reject(\"Sauce tunnel support is missing configuration: Sauce username.\");\n      }\n\n      if (!this.options.tunnel.accessKey) {\n        return reject(\"Sauce tunnel support is missing configuration: Sauce access key.\");\n      }\n\n      analytics.push(\"sauce-connect-launcher-download\");\n\n      const options = _.assign({}, this.options.tunnel, { logger: logger.debug });\n      /*eslint-disable no-console */\n      return this.sauceConnectLauncher.download(options, (err) => {\n        if (err) {\n          analytics.mark(\"sauce-connect-launcher-download\", \"failed\");\n          logger.err(\"Failed to download sauce connect binary:\");\n          logger.err(err);\n          logger.err(\"sauce-connect-launcher will attempt to re-download \" +\n            \"next time it is run.\");\n          return reject(err);\n        } else {\n          analytics.mark(\"sauce-connect-launcher-download\");\n          return resolve();\n        }\n      });\n    });\n\n  }\n\n  open() {\n    this.tunnelInfo = null;\n    let connectFailures = 0;\n\n    logger.log(`Opening sauce tunnel [${this.options.tunnel.tunnelIdentifier}]`\n      + ` for user ${this.options.tunnel.username}`);\n\n    const connect = (/*runDiagnostics*/) => {\n      return new Promise((resolve, reject) => {\n        const logFilePath = `${path.resolve(settings.tempDir)}/build-${\n          settings.buildId}_sauceconnect_${this.options.tunnel.tunnelIdentifier}.log`;\n\n        const sauceOptions = _.assign({}, this.options.tunnel, {\n          readyFileId: this.options.tunnel.tunnelIdentifier,\n          verbose: settings.debug,\n          verboseDebugging: settings.debug,\n          logfile: logFilePath,\n          port: settings.BASE_SELENIUM_PORT_OFFSET\n        });\n\n        logger.debug(`calling sauceConnectLauncher() w/ ${JSON.stringify(sauceOptions)}`);\n\n        this.sauceConnectLauncher(sauceOptions, (err, sauceConnectProcess) => {\n          if (err) {\n            logger.debug(\"Error from sauceConnectLauncher():\");\n            logger.debug(err.message);\n\n            if (err.message && err.message.indexOf(\"Could not start Sauce Connect\") > -1) {\n              return reject(err.message);\n            } else if (settings.BAILED) {\n              connectFailures++;\n              // If some other parallel tunnel construction attempt has tripped the BAILED flag\n              // Stop retrying and report back a failure.\n              return reject(new Error(\"Bailed due to maximum number of tunnel retries.\"));\n            } else {\n              connectFailures++;\n\n              if (connectFailures >= settings.MAX_CONNECT_RETRIES) {\n                // We've met or exceeded the number of max retries, stop trying to connect.\n                // Make sure other attempts don't try to re-state this error.\n                settings.BAILED = true;\n                return reject(new Error(`Failed to create a secure sauce tunnel after ${\n                  connectFailures} attempts.`));\n              } else {\n                // Otherwise, keep retrying, and hope this is merely a blip and not an outage.\n                logger.err(`>>> Sauce Tunnel Connection Failed!  Retrying ${\n                  connectFailures} of ${settings.MAX_CONNECT_RETRIES} attempts...`);\n\n                return connect()\n                  .then(resolve)\n                  .catch(reject);\n              }\n            }\n          } else {\n            this.tunnelInfo = { process: sauceConnectProcess };\n            return resolve();\n          }\n        });\n      });\n    };\n\n    return connect();\n  }\n\n  close() {\n    return new Promise((resolve) => {\n      if (this.tunnelInfo) {\n        logger.log(`Closing sauce tunnel [${this.options.tunnel.tunnelIdentifier}]`);\n        this.tunnelInfo.process.close(() => {\n          resolve();\n        });\n      } else {\n        resolve();\n      }\n    });\n\n  }\n}\n"]}