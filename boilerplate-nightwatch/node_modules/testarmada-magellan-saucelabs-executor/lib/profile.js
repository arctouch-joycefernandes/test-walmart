"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _guacamole = require("guacamole");

var _guacamole2 = _interopRequireDefault(_guacamole);

var _cli_list = require("guacamole/src/cli_list");

var _cli_list2 = _interopRequireDefault(_cli_list);

var _yargs = require("yargs");

var _logger = require("./logger");

var _logger2 = _interopRequireDefault(_logger);

var _settings = require("./settings");

var _settings2 = _interopRequireDefault(_settings);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FIREFOX_MARIONETTE = 48;

var _mergeCapabilities = function _mergeCapabilities(capabilities, capsConfig, browser) {
  if (capsConfig && capsConfig[browser]) {
    capabilities = _lodash2.default.merge(capabilities, capsConfig[browser]);
    _logger2.default.debug("DesiredCapabilities after merging appCapabilitiesConfig for browser " + browser);
    _logger2.default.debug(JSON.stringify(capabilities));
  }
  return capabilities;
};

var _patchFirefox = function _patchFirefox(capabilities) {
  if (capabilities.browserName === "firefox" && parseInt(capabilities.version) >= FIREFOX_MARIONETTE) {
    capabilities.marionette = true;
    capabilities.javascriptEnabled = true;
  }

  return capabilities;
};

var _patchAppium = function _patchAppium(capabilities, browser) {
  var tempCap = _lodash2.default.cloneDeep(capabilities);
  // for customized app capabilities
  tempCap = _mergeCapabilities(tempCap, _settings2.default.config.appCapabilitiesConfig, browser);

  // if app location is passed via command line arg
  if (_settings2.default.config.app) {
    tempCap.app = _settings2.default.config.app;
  }

  if (tempCap.app) {
    delete tempCap.browserName;
  }

  return tempCap;
};

var _mergeLocalAppiumCapabilities = function _mergeLocalAppiumCapabilities(appCapabilitiesConfig, browser, capabilities) {
  // for appCapabilitiesConfig
  _logger2.default.debug(appCapabilitiesConfig);
  var appCapabilitiesConfigPath = void 0;

  try {
    appCapabilitiesConfigPath = _path2.default.resolve(process.cwd(), appCapabilitiesConfig);
    _logger2.default.debug("Requiring " + appCapabilitiesConfigPath);
    /* eslint-disable global-require */
    var capabilitiesConfig = require(appCapabilitiesConfigPath);
    /* eslint-enable global-require */

    capabilities = _mergeCapabilities(capabilities, capabilitiesConfig, browser);
  } catch (e) {
    _logger2.default.log("Could not load " + appCapabilitiesConfigPath + ".\n                Does the file exist or is it a valid JSON or JS file ?");
  }

  return capabilities;
};

exports.default = {
  getNightwatchConfig: function getNightwatchConfig(profile, sauceSettings) {
    var capabilities = _lodash2.default.assign({}, profile.desiredCapabilities);

    if (sauceSettings.tunnel.tunnelIdentifier) {
      capabilities["tunnel-identifier"] = sauceSettings.tunnel.tunnelIdentifier;
      if (sauceSettings.sharedSauceParentAccount) {
        // if tunnel is shared by parent account
        capabilities["parent-tunnel"] = sauceSettings.sharedSauceParentAccount;
      }
    } else {
      // This property may exist, so blow it away
      delete capabilities["tunnel-identifier"];
    }

    /*eslint-disable camelcase*/
    var config = {
      desiredCapabilities: capabilities,
      username: sauceSettings.tunnel.username,
      access_key: sauceSettings.tunnel.accessKey
    };

    // For *outbound Selenium control traffic*, Nightwatch supports a proxy
    // property directly on the environment configuration object (note: this is
    // NOT to be confused with proxy settings in desiredCapabilities, which are
    // used for return path traffic from the remote browser).
    if (sauceSettings.sauceOutboundProxy) {
      config.proxy = sauceSettings.sauceOutboundProxy;
    }

    _logger2.default.debug("executor config: " + JSON.stringify(config));
    return config;
  },

  getProfiles: function getProfiles(opts) {
    var argvMock = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    var runArgv = _yargs.argv;

    if (argvMock) {
      runArgv = argvMock;
    }

    return _guacamole2.default.initialize().then(function () {
      return new Promise(function (resolve) {
        if (runArgv.sauce_browser) {
          var p = {
            desiredCapabilities: _patchFirefox(_guacamole2.default.get({
              id: runArgv.sauce_browser
            })[0]),
            executor: "sauce",
            nightwatchEnv: "sauce",
            id: runArgv.sauce_browser
          };
          p.desiredCapabilities = _patchAppium(p.desiredCapabilities, runArgv.sauce_browser);

          _logger2.default.debug("detected profile: " + JSON.stringify(p));

          resolve(p);
        } else if (runArgv.sauce_browsers) {
          var tempBrowsers = runArgv.sauce_browsers.split(",");
          var returnBrowsers = [];

          _lodash2.default.forEach(tempBrowsers, function (browser) {
            var b = browser.trim();
            var p = {
              desiredCapabilities: _patchFirefox(_guacamole2.default.get({
                id: b
              })[0]),
              executor: "sauce",
              nightwatchEnv: "sauce",
              // id is for magellan reporter
              id: b
            };

            p.desiredCapabilities = _patchAppium(p.desiredCapabilities, b);

            returnBrowsers.push(p);
          });

          _logger2.default.debug("detected profiles: " + JSON.stringify(returnBrowsers));

          resolve(returnBrowsers);
        } else {
          resolve();
        }
      });
    });
  },

  /*eslint-disable no-unused-vars*/
  getCapabilities: function getCapabilities(profile, opts) {
    // profile key mapping
    // browser => id
    // resolution => screenResolution
    // orientation => deviceOrientation
    var prof = {
      id: profile.browser
    };

    if (profile.resolution) {
      prof.screenResolution = profile.resolution;
    }

    if (profile.orientation) {
      prof.deviceOrientation = profile.orientation;
    }

    return _guacamole2.default.initialize().then(function () {
      return new Promise(function (resolve, reject) {
        try {
          var desiredCapabilities = _patchFirefox(_guacamole2.default.get(prof)[0]);
          // add executor info back to capabilities
          var p = {
            desiredCapabilities: desiredCapabilities,
            executor: profile.executor,
            nightwatchEnv: profile.executor,
            id: prof.id
          };
          // for appium test
          if (profile.appium) {
            p.desiredCapabilities = _lodash2.default.merge(p.desiredCapabilities, profile.appium);
          }
          if (profile.appCapabilitiesConfig) {
            p.desiredCapabilities = _mergeLocalAppiumCapabilities(profile.appCapabilitiesConfig, profile.browser, p.desiredCapabilities);
          }
          p.desiredCapabilities = _patchAppium(p.desiredCapabilities, profile.browser);
          resolve(p);
        } catch (e) {
          reject("Executor sauce cannot resolve profile " + JSON.stringify(profile));
        }
      });
    });
  },

  listBrowsers: function listBrowsers(opts, callback) {
    var argvMock = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    var runArgv = _yargs.argv;

    if (argvMock) {
      runArgv = argvMock;
    }

    _guacamole2.default.initialize(true).then(function () {
      return new Promise(function (resolve) {
        if (runArgv.device_additions) {
          _logger2.default.log("Loading customized profiles");
          _guacamole2.default.addNormalizedBrowsersFromFile(runArgv.device_additions);
        }
        resolve();
      });
    }).then(function () {
      return new Promise(function (resolve) {
        (0, _cli_list2.default)(function (browserTable) {
          // convert table heading
          browserTable.options.head[1] = "Copy-Paste Command-Line Option";
          _logger2.default.loghelp(browserTable.toString());
          _logger2.default.loghelp("");
          resolve(browserTable);
        });
      });
    }).then(function (browserTable) {
      callback(null, browserTable);
    }).catch(function (err) {
      _logger2.default.err("Couldn't fetch sauce browsers. Error: " + err);
      _logger2.default.err(err.stack);
      callback(err);
    });
  }
};
//# sourceMappingURL=profile.js.map