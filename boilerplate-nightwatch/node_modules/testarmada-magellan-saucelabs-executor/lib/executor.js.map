{"version":3,"sources":["../src/executor.js"],"names":["config","settings","tunnel","locks","Executor","setupRunner","mocks","ILocks","Locks","setupTunnels","then","initialize","ITunnel","Tunnel","useTunnels","analytics","push","open","mark","logger","log","tunnelIdentifier","catch","err","Promise","resolve","reject","tunnelAnnouncement","sharedSauceParentAccount","teardownRunner","teardown","close","setupTest","callback","acquire","teardownTest","info","release","execute","testRun","options","ifork","fork","getCommand","getArguments","summerizeTest","magellanBuildId","testResult","additionalLog","metadata","warn","sessionId","debug","result","stringifyWarn","infoRequestOption","url","username","method","auth","user","pass","accessKey","body","json","sauceOutboundProxy","proxy","strictSSL","verror","vres","vjson","JSON","stringify","visibility","is_public","requestPath","data","requestOptions","error","res","module","exports"],"mappings":"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","file":"executor.js","sourcesContent":["import { fork } from \"child_process\";\nimport Locks from \"./locks\";\nimport Tunnel from \"./tunnel\";\nimport logger from \"./logger\";\nimport settings from \"./settings\";\nimport analytics from \"./global_analytics\";\nimport request from \"request\";\n\nlet config = settings.config;\n\nlet tunnel = null;\nlet locks = null;\n\nconst Executor = {\n  setupRunner: (mocks = null) => {\n\n    let ILocks = Locks;\n\n    if (mocks && mocks.Locks) {\n      ILocks = mocks.Locks;\n    }\n\n    locks = new ILocks(config);\n\n    return Executor\n      .setupTunnels(mocks)\n      .then(() => {\n        return locks.initialize();\n      });\n  },\n\n  setupTunnels: (mocks = null) => {\n    let ITunnel = Tunnel;\n\n    if (mocks) {\n      if (mocks.Tunnel) {\n        ITunnel = mocks.Tunnel;\n      }\n      if (mocks.config) {\n        config = mocks.config;\n      }\n    }\n\n    if (config.useTunnels) {\n      // create new tunnel if needed\n      tunnel = new ITunnel(config);\n\n      return tunnel\n        .initialize()\n        .then(() => {\n          analytics.push(\"sauce-open-tunnels\");\n          return tunnel.open();\n        })\n        .then(() => {\n          analytics.mark(\"sauce-open-tunnels\");\n          logger.log(\"Sauce tunnel is opened!  Continuing...\");\n          logger.log(`Assigned tunnel [${config.tunnel.tunnelIdentifier}] to all workers`);\n        })\n        .catch((err) => {\n          analytics.mark(\"sauce-open-tunnels\", \"failed\");\n          return new Promise((resolve, reject) => {\n            reject(err);\n          });\n        });\n    } else {\n      return new Promise((resolve) => {\n        if (config.tunnel.tunnelIdentifier) {\n          let tunnelAnnouncement = config.tunnel.tunnelIdentifier;\n          if (config.sharedSauceParentAccount) {\n            tunnelAnnouncement = `${config.sharedSauceParentAccount}/${tunnelAnnouncement}`;\n          }\n          logger.log(`Connected to sauce tunnel [${tunnelAnnouncement}]`);\n        } else {\n          logger.log(\"Connected to sauce without tunnel\");\n        }\n        return resolve();\n      });\n    }\n  },\n\n  teardownRunner: (mocks = null) => {\n    if (mocks && mocks.config) {\n      config = mocks.config;\n    }\n\n    // shut down locks\n    locks.teardown();\n\n    // close tunnel if needed\n    if (tunnel && config.useTunnels) {\n      return tunnel\n        .close()\n        .then(() => {\n          logger.log(\"Sauce tunnel is closed!  Continuing...\");\n        });\n    } else {\n      return new Promise((resolve) => {\n        resolve();\n      });\n    }\n  },\n\n  setupTest: (callback) => {\n    locks.acquire(callback);\n  },\n\n  teardownTest: (info, callback) => {\n    locks.release(info);\n    callback(info);\n  },\n\n  execute: (testRun, options, mocks = null) => {\n    let ifork = fork;\n\n    if (mocks && mocks.fork) {\n      ifork = mocks.fork;\n    }\n\n    return ifork(testRun.getCommand(), testRun.getArguments(), options);\n  },\n\n  /*eslint-disable consistent-return*/\n  summerizeTest: (magellanBuildId, testResult, callback) => {\n    let additionalLog = \"\";\n\n    if (!testResult.metadata) {\n      // testarmada-nightwatch-extra isn't in use, users need\n      // to report result to saucelabs by themselves\n      logger.warn(\"No meta data is found, executor will not report result to saucelabs\"\n        + \" This is mainly caused by not using https://github.com/TestArmada/nightwatch-extra\");\n      return callback();\n    }\n    try {\n      const sessionId = testResult.metadata.sessionId;\n\n      logger.debug(`Saucelabs replay can be found at https://saucelabs.com/tests/${sessionId}\\n`);\n\n      if (!testResult.result) {\n        // print out sauce replay to console if test failed\n        additionalLog = logger.stringifyWarn(`Saucelabs replay can be found at https://saucelabs.com/tests/${sessionId}\\n`);\n      }\n      const infoRequestOption = {\n        url: `https://saucelabs.com/rest/v1/users/${config.tunnel.username}`,\n        method: \"GET\",\n        auth: {\n          user: config.tunnel.username,\n          pass: config.tunnel.accessKey\n        },\n        body: {},\n        json: true\n      };\n\n      if (settings.config.sauceOutboundProxy) {\n        infoRequestOption.proxy = settings.config.sauceOutboundProxy;\n        infoRequestOption.strictSSL = false;\n      }\n\n      // retrieve account visibility from saucelabs\n      request(infoRequestOption, (verror, vres, vjson) => {\n        if (verror) {\n          logger.err(`Error when getting saucelabs account detail for ${config.tunnel.username}:`);\n          logger.err(verror);\n          return callback();\n        }\n\n        logger.debug(\"Response from Saucelabs account detail\");\n        logger.debug(JSON.stringify(vjson));\n\n        const visibility = vjson.is_public ? \"public\" : \"team\";\n\n        const requestPath = `/rest/v1/${config.tunnel.username}/jobs/${sessionId}`;\n        const data = {\n          \"passed\": testResult.result,\n          // TODO: remove this\n          \"build\": magellanBuildId,\n          \"public\": visibility\n        };\n\n        logger.debug(\"Data posting to SauceLabs job:\");\n        logger.debug(JSON.stringify(data));\n        logger.debug(`Updating saucelabs ${requestPath}`);\n\n        const requestOptions = {\n          url: `https://saucelabs.com${requestPath}`,\n          method: \"PUT\",\n          auth: {\n            user: config.tunnel.username,\n            pass: config.tunnel.accessKey\n          },\n          body: data,\n          json: true\n        };\n\n        if (settings.config.sauceOutboundProxy) {\n          requestOptions.proxy = settings.config.sauceOutboundProxy;\n          requestOptions.strictSSL = false;\n        }\n\n        request(requestOptions, (error, res, json) => {\n          if (error) {\n            logger.err(\"Error when posting update to Saucelabs session with request:\");\n            logger.err(error);\n            return callback();\n          }\n\n          logger.debug(\"Response from Saucelabs session update:\");\n          logger.debug(JSON.stringify(json));\n          return callback(additionalLog);\n        });\n      });\n    } catch (err) {\n      logger.err(`Error ${err}`);\n      return callback();\n    }\n  }\n\n};\n\nmodule.exports = Executor;\n"]}