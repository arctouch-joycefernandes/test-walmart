{"version":3,"sources":["../src/executor.js"],"names":["config","settings","tunnel","setupRunner","mocks","logger","prefix","ITunnel","Tunnel","useTunnels","initialize","then","analytics","push","open","mark","log","localIdentifier","catch","err","Promise","resolve","reject","tunnelAnnouncement","teardownRunner","close","setupTest","callback","teardownTest","info","execute","testRun","options","ifork","fork","getCommand","getArguments","summerizeTest","magellanBuildId","testResult","metadata","warn"],"mappings":"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","file":"executor.js","sourcesContent":["import { fork } from \"child_process\";\nimport logger from \"testarmada-logger\";\nimport Tunnel from \"./local\";\nimport settings from \"./settings\";\nimport analytics from \"./global_analytics\";\n\nlet config = settings.config;\n\nlet tunnel = null;\n\nexport default {\n  setupRunner: (mocks = null) => {\n    logger.prefix = \"Browserstack Executor\";\n    let ITunnel = Tunnel;\n\n    if (mocks) {\n      if (mocks.Tunnel) {\n        ITunnel = mocks.Tunnel;\n      }\n      if (mocks.config) {\n        config = mocks.config;\n      }\n    }\n\n    if (config.useTunnels) {\n      // create new tunnel if needed\n      tunnel = new ITunnel(config);\n\n      return tunnel\n        .initialize()\n        .then(() => {\n          analytics.push(\"browserstack-open-tunnels\");\n          return tunnel.open();\n        })\n        .then(() => {\n          analytics.mark(\"browserstack-open-tunnels\");\n          logger.log(\"Browserstack local tunnel is opened!  Continuing...\");\n          logger.log(`Assigned local tunnel [${config.localIdentifier}] to all workers`);\n        })\n        .catch((err) => {\n          analytics.mark(\"browserstack-open-tunnels\", \"failed\");\n          return new Promise((resolve, reject) => {\n            reject(err);\n          });\n        });\n    } else {\n      return new Promise((resolve) => {\n        if (config.localIdentifier) {\n          const tunnelAnnouncement = config.localIdentifier;\n          logger.log(`Connected to browserstack local tunnel [${tunnelAnnouncement}]`);\n        } else {\n          logger.log(\"Connected to browserstack local without tunnel\");\n        }\n        return resolve();\n      });\n    }\n  },\n\n  teardownRunner: (mocks = null) => {\n    logger.prefix = \"Browserstack Executor\";\n    if (mocks && mocks.config) {\n      config = mocks.config;\n    }\n\n    // close tunnel if needed\n    if (tunnel && config.useTunnels) {\n      return tunnel\n        .close()\n        .then(() => {\n          logger.log(\"Browserstack tunnel is closed!  Continueing...\");\n        });\n    } else {\n      return new Promise((resolve) => {\n        resolve();\n      });\n    }\n  },\n\n  setupTest: (callback) => {\n    callback();\n  },\n\n  teardownTest: (info, callback) => {\n    callback();\n  },\n\n  execute: (testRun, options, mocks = null) => {\n    let ifork = fork;\n\n    if (mocks && mocks.fork) {\n      ifork = mocks.fork;\n    }\n\n    return ifork(testRun.getCommand(), testRun.getArguments(), options);\n  },\n\n  summerizeTest: (magellanBuildId, testResult, callback) => {\n    logger.prefix = \"Browserstack Executor\";\n\n    if (!testResult.metadata) {\n      logger.warn(\"No meta data is found.\"\n        + \" This is mainly caused by not using https://github.com/TestArmada/nightwatch-extra\");\n      return callback();\n    }\n\n    return callback();\n  }\n};\n"]}