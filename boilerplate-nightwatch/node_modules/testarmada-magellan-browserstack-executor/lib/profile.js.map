{"version":3,"sources":["../src/profile.js"],"names":["getNightwatchConfig","profile","browserstackSettings","logger","prefix","capabilities","_","assign","desiredCapabilities","user","key","useTunnels","localIdentifier","moreLogs","realDevice","realMobile","app","config","debug","JSON","stringify","getProfiles","opts","argvMock","runArgv","argv","Pancake","initialize","then","Promise","resolve","bs_browser","p","get","executor","nightwatchEnv","id","bs_browsers","tempBrowsers","split","returnBrowsers","forEach","browser","b","trim","push","getCapabilities","reject","resolution","orientation","deviceOrientation","e","listBrowsers","callback","browsers","table","cliList","loghelp","toString","catch","err","stack"],"mappings":"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","file":"profile.js","sourcesContent":["import _ from \"lodash\";\nimport { argv } from \"yargs\";\nimport logger from \"testarmada-logger\";\nimport Pancake from \"./pancake\";\n\nexport default {\n  getNightwatchConfig: (profile, browserstackSettings) => {\n    logger.prefix = \"Browserstack Executor\";\n    const capabilities = _.assign({}, profile.desiredCapabilities);\n\n    capabilities[\"browserstack.user\"] = browserstackSettings.user;\n    capabilities[\"browserstack.key\"] = browserstackSettings.key;\n\n    if (browserstackSettings.useTunnels) {\n      capabilities[\"browserstack.local\"] = true;\n      capabilities[\"browserstack.localIdentifier\"] = browserstackSettings.localIdentifier;\n    }\n\n\n    if (browserstackSettings.moreLogs) {\n      capabilities[\"browserstack.debug\"] = true;\n      capabilities[\"browserstack.networkLogs\"] = true;\n    }\n\n    if (browserstackSettings.realDevice) {\n      // hardcode for now\n      capabilities.realMobile = true;\n    }\n\n    if (browserstackSettings.app) {\n      capabilities.app = browserstackSettings.app;\n    }\n\n    const config = {\n      desiredCapabilities: capabilities\n    };\n\n    logger.debug(`executor config: ${JSON.stringify(config)}`);\n    return config;\n  },\n\n  getProfiles: (opts, argvMock = null) => {\n    logger.prefix = \"Browserstack Executor\";\n    let runArgv = argv;\n\n    if (argvMock) {\n      runArgv = argvMock;\n    }\n\n    return Pancake\n      .initialize()\n      .then(() => {\n        return new Promise((resolve) => {\n          if (runArgv.bs_browser) {\n            const p = {\n              desiredCapabilities: Pancake.get(runArgv.bs_browser),\n              executor: \"browserstack\",\n              nightwatchEnv: \"browserstack\",\n              id: runArgv.bs_browser\n            };\n\n            logger.debug(`detected profile: ${JSON.stringify(p)}`);\n\n            resolve(p);\n          } else if (runArgv.bs_browsers) {\n            const tempBrowsers = runArgv.bs_browsers.split(\",\");\n            const returnBrowsers = [];\n\n            _.forEach(tempBrowsers, (browser) => {\n              const b = browser.trim();\n              const p = {\n                desiredCapabilities: Pancake.get(b),\n                executor: \"browserstack\",\n                nightwatchEnv: \"browserstack\",\n                // id is for magellan reporter\n                id: b\n              };\n\n              returnBrowsers.push(p);\n            });\n\n            logger.debug(`detected profiles: ${JSON.stringify(returnBrowsers)}`);\n\n            resolve(returnBrowsers);\n          } else {\n            resolve();\n          }\n        });\n      });\n  },\n\n  /*eslint-disable no-unused-vars*/\n  getCapabilities: (profile, opts) => {\n    logger.prefix = \"Browserstack Executor\";\n    // profile key mapping\n    // browser => id\n    // resolution => resolution\n    // orientation => deviceOrientation\n\n    const id = profile.browser;\n\n    return Pancake\n      .initialize()\n      .then(() => {\n        return new Promise((resolve, reject) => {\n          try {\n            const desiredCapabilities = Pancake.get(id);\n            // add executor info back to capabilities\n\n            if (profile.resolution) {\n              desiredCapabilities.resolution = profile.resolution;\n            }\n\n            if (profile.orientation) {\n              desiredCapabilities.deviceOrientation = profile.orientation;\n            }\n            const p = {\n              desiredCapabilities,\n              executor: profile.executor,\n              nightwatchEnv: profile.executor,\n              id\n            };\n\n            resolve(p);\n          } catch (e) {\n            reject(`Executor browserstack cannot resolve profile \n            ${JSON.stringify(profile)}`);\n          }\n        });\n      });\n  },\n\n  listBrowsers: (opts, callback) => {\n    logger.prefix = \"Browserstack Executor\";\n    Pancake\n      .initialize()\n      .then((browsers) => {\n        const table = Pancake.cliList();\n        logger.loghelp(table.toString());\n        callback(null, browsers);\n      })\n      .catch((err) => {\n        logger.err(`Couldn't fetch browserstack browsers. Error: ${err}`);\n        logger.err(err.stack);\n        callback(err);\n      });\n  }\n};\n"]}