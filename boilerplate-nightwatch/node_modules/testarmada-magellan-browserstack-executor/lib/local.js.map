{"version":3,"sources":["../src/local.js"],"names":["Local","options","BrowserstackMock","_","assign","browserstack","Browserstack","Promise","resolve","reject","key","user","logger","prefix","localIdentifier","localKey","connectFailures","log","connect","logFilePath","path","settings","tempDir","localOptions","verbose","debug","logFile","forceLocal","JSON","stringify","start","err","message","BAILED","Error","MAX_CONNECT_RETRIES","then","catch","stop"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;;;AAEA;;;;AACA;;;;;;;;IAEqBA,K;AACnB,iBAAYC,OAAZ,EAA8C;AAAA,QAAzBC,gBAAyB,uEAAN,IAAM;;AAAA;;AAC5C,SAAKD,OAAL,GAAeE,iBAAEC,MAAF,CAAS,EAAT,EAAaH,OAAb,CAAf;AACA,SAAKI,YAAL,GAAoB,IAAIC,wBAAJ,EAApB;;AAEA,QAAIJ,gBAAJ,EAAsB;AACpB,WAAKG,YAAL,GAAoBH,gBAApB;AACD;AACF;;;;iCAEY;AAAA;;AACX,aAAO,IAAIK,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAI,CAAC,MAAKR,OAAL,CAAaS,GAAlB,EAAuB;AACrB,iBAAOD,OAAO,0CACV,0CADG,CAAP;AAED;;AAED,YAAI,CAAC,MAAKR,OAAL,CAAaU,IAAlB,EAAwB;AACtB,iBAAOF,OAAO,0CACV,2CADG,CAAP;AAED;;AAED,eAAOD,SAAP;AACD,OAZM,CAAP;AAaD;;;2BAEM;AAAA;;AACLI,iCAAOC,MAAP,GAAgB,uBAAhB;AACA,UAAMC,kBAAkB,KAAKb,OAAL,CAAaa,eAArC;AACA,UAAMC,WAAW,KAAKd,OAAL,CAAaS,GAA9B;AACA,UAAIM,kBAAkB,CAAtB;;AAEAJ,iCAAOK,GAAP,0CAAkDH,eAAlD;;AAEA,UAAMI,UAAU,SAAVA,OAAU,GAAM;AACpB,eAAO,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAMU,cAAiBC,eAAKZ,OAAL,CAAaa,mBAASC,OAAtB,CAAjB,eACJR,eADI,2BAAN;AAEA,cAAMS,eAAe;AACnBb,iBAAKK,QADc;AAEnBD,4CAFmB;;AAInBU,qBAASH,mBAASI,KAJC;AAKnBC,qBAASP,WALU;AAMnBQ,wBAAY;AANO,WAArB;;AASAf,qCAAOa,KAAP,4CAAsDG,KAAKC,SAAL,CAAeN,YAAf,CAAtD;;AAEA,iBAAKlB,YAAL,CAAkByB,KAAlB,CAAwBP,YAAxB,EAAsC,UAACQ,GAAD,EAAS;AAC7C,gBAAIA,GAAJ,EAAS;AACPnB,yCAAOa,KAAP,CAAa,wCAAb;AACAb,yCAAOa,KAAP,CAAaM,IAAIC,OAAjB;;AAEA,kBAAIX,mBAASY,MAAb,EAAqB;AACnBjB;;AAEA,uBAAOP,OAAO,IAAIyB,KAAJ,CAAU,qCACpB,+BADU,CAAP,CAAP;AAED,eALD,MAKO;AACLlB;;AAEA,oBAAIA,mBAAmBK,mBAASc,mBAAhC,EAAqD;AACnDd,qCAASY,MAAT,GAAkB,IAAlB;AACA,yBAAOxB,OAAO,IAAIyB,KAAJ,CAAU,sEACHlB,eADG,gBAAV,CAAP,CAAP;AAED,iBAJD,MAIO;AACL;AACAJ,6CAAOmB,GAAP,CAAW,sDAAoDf,eAApD,aACAK,mBAASc,mBADT,kBAAX;;AAGA,yBAAOjB,UACJkB,IADI,CACC5B,OADD,EAEJ6B,KAFI,CAEE5B,MAFF,CAAP;AAGD;AAEF;AACF,aA3BD,MA2BO;AACL,qBAAOD,SAAP;AACD;AACF,WA/BD;AAgCD,SA9CM,CAAP;AA+CD,OAhDD;;AAkDA,aAAOU,SAAP;AACD;;;4BAEO;AAAA;;AACNN,iCAAOC,MAAP,GAAgB,uBAAhB;AACA,aAAO,IAAIN,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BI,mCAAOK,GAAP,0CAAkD,OAAKhB,OAAL,CAAaa,eAA/D;AACA,eAAKT,YAAL,CAAkBiC,IAAlB,CAAuB,YAAM;AAC3B9B;AACD,SAFD;AAGD,OALM,CAAP;AAMD;;;;;;kBA/FkBR,K","file":"local.js","sourcesContent":["import path from \"path\";\nimport { Local as Browserstack } from \"browserstack-local\";\nimport _ from \"lodash\";\n\nimport settings from \"./settings\";\nimport logger from \"testarmada-logger\";\n\nexport default class Local {\n  constructor(options, BrowserstackMock = null) {\n    this.options = _.assign({}, options);\n    this.browserstack = new Browserstack();\n\n    if (BrowserstackMock) {\n      this.browserstack = BrowserstackMock;\n    }\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      if (!this.options.key) {\n        return reject(\"Browserstack local tunnel support is \"\n          + \"missing configuration: Browserstack key.\");\n      }\n\n      if (!this.options.user) {\n        return reject(\"Browserstack local tunnel support is \"\n          + \"missing configuration: Browserstack user.\");\n      }\n\n      return resolve();\n    });\n  }\n\n  open() {\n    logger.prefix = \"Browserstack Executor\";\n    const localIdentifier = this.options.localIdentifier;\n    const localKey = this.options.key;\n    let connectFailures = 0;\n\n    logger.log(`Opening browserstack local connect [${localIdentifier}]`);\n\n    const connect = () => {\n      return new Promise((resolve, reject) => {\n        const logFilePath = `${path.resolve(settings.tempDir)}/build-${\n          localIdentifier}_browserstacklocal.log`;\n        const localOptions = {\n          key: localKey,\n          localIdentifier,\n\n          verbose: settings.debug,\n          logFile: logFilePath,\n          forceLocal: true\n        };\n\n        logger.debug(`calling browserstack local.start() w/ ${JSON.stringify(localOptions)}`);\n\n        this.browserstack.start(localOptions, (err) => {\n          if (err) {\n            logger.debug(\"Error from browserstack local.start():\");\n            logger.debug(err.message);\n\n            if (settings.BAILED) {\n              connectFailures++;\n\n              return reject(new Error(\"Bailed due to maximum number of \"\n                + \"browsetstack connect retries.\"));\n            } else {\n              connectFailures++;\n\n              if (connectFailures >= settings.MAX_CONNECT_RETRIES) {\n                settings.BAILED = true;\n                return reject(new Error(\"Failed to create a secure browserstack local \"\n                  + `connect after ${connectFailures} attempts.`));\n              } else {\n                // Otherwise, keep retrying, and hope this is merely a blip and not an outage.\n                logger.err(`>>> Browserstack Local Connect Failed!  Retrying ${connectFailures}`\n                  + ` of ${settings.MAX_CONNECT_RETRIES} attempts...`);\n\n                return connect()\n                  .then(resolve)\n                  .catch(reject);\n              }\n\n            }\n          } else {\n            return resolve();\n          }\n        });\n      });\n    };\n\n    return connect();\n  }\n\n  close() {\n    logger.prefix = \"Browserstack Executor\";\n    return new Promise((resolve) => {\n      logger.log(`Closing browserstack local connect [${this.options.localIdentifier}]`);\n      this.browserstack.stop(() => {\n        resolve();\n      });\n    });\n  }\n}\n"]}