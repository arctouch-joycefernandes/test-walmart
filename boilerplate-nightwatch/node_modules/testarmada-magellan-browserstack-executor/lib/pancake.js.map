{"version":3,"sources":["../src/pancake.js"],"names":["BROWSERSTACK_API_URL","browserCache","initialize","ignoreCache","argvMock","envMock","logger","prefix","self","config","Promise","resolve","reject","_","keys","length","configuration","validateConfig","e","options","user","key","request","get","err","response","body","_buildBrowserCache","JSON","parse","id","cliList","loghelp","families","groupBy","capabilities","browser","table","Table","head","count","Object","sort","forEach","family","push","clc","red","capitalize","currentFamily","_generateKey","blackBright","browser_version","os","os_version","device","values","join","replace","browserstackResponse"],"mappings":"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","file":"pancake.js","sourcesContent":["import _ from \"lodash\";\nimport request from \"request\";\nimport Table from \"cli-table\";\nimport clc from \"cli-color\";\nimport logger from \"testarmada-logger\";\nimport configuration from \"./configuration\";\n\nconst BROWSERSTACK_API_URL = \"https://www.browserstack.com/automate/browsers.json\";\nlet browserCache = {};\n\nexport default {\n  initialize(ignoreCache = false, argvMock = null, envMock = null) {\n    logger.prefix = \"Browserstack Executor\";\n    const self = this;\n    let config = null;\n\n    return new Promise((resolve, reject) => {\n      if (!ignoreCache\n        && _.keys(browserCache).length > 0) {\n        resolve(browserCache);\n      } else {\n        try {\n          config = configuration.validateConfig({}, argvMock, envMock);\n        } catch (e) {\n          reject(e);\n        }\n        const options = {\n          \"auth\": {\n            \"user\": config.user,\n            \"pass\": config.key,\n            \"sendImmediately\": false\n          }\n        };\n\n        request.get(BROWSERSTACK_API_URL, options, (err, response, body) => {\n          if (err) {\n            reject(err);\n          }\n\n          self._buildBrowserCache(JSON.parse(body));\n          resolve(browserCache);\n        });\n      }\n    });\n  },\n\n  get(id) {\n    if (_.keys(browserCache).length > 0) {\n      return browserCache[id];\n    }\n\n    return null;\n  },\n\n  cliList() {\n    logger.prefix = \"Browserstack Executor\";\n    const self = this;\n\n    if (_.keys(browserCache).length > 0) {\n      logger.loghelp(\"Available Browserstack Browsers:\");\n\n      const families = _.groupBy(browserCache, (capabilities) => capabilities.browser);\n      const table = new Table({\n        head: [\"Family\", \"Alias\", \"Browser/Env\", \"Version\", \"OS\", \"OS Version\", \"Device\"]\n      });\n\n      let count = 1;\n\n      Object.keys(families).sort().forEach((family) => {\n        table.push([clc.red(_.capitalize(family))]);\n        const currentFamily = families[family];\n\n        _.forEach(currentFamily, (capabilities) => {\n          const key = self._generateKey(capabilities);\n          table.push([\n            clc.blackBright(`${count}.`),\n            key,\n            _.capitalize(capabilities.browser),\n            capabilities.browser_version ? capabilities.browser_version : \"N/A\",\n            _.capitalize(capabilities.os),\n            capabilities.os_version,\n            capabilities.device ? capabilities.device : \"N/A\"\n          ]);\n          count++;\n        });\n      });\n\n      return table;\n    }\n\n    return null;\n  },\n\n  _generateKey(capabilities) {\n    const values = [];\n\n    values.push(capabilities.browser);\n\n    if (capabilities.browser_version) {\n      values.push(capabilities.browser_version);\n    }\n\n    values.push(capabilities.os);\n    values.push(capabilities.os_version);\n\n    if (capabilities.device) {\n      values.push(capabilities.device);\n    }\n\n    const key = values.join(\"_\").replace(/(\\.|\\s)/g, \"_\");\n    return key;\n  },\n\n  _buildBrowserCache(browserstackResponse) {\n    const self = this;\n    browserCache = {};\n\n    _.forEach(browserstackResponse, (capabilities) => {\n      const key = self._generateKey(capabilities);\n      browserCache[key] = capabilities;\n    });\n\n  }\n};\n"]}