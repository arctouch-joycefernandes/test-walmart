{"version":3,"sources":["../src/owl.js"],"names":["createCommandContent","wdcommand","module","exports","argv","yargs","usage","option","alias","describe","demand","help","output","wd","Webdriver","settings","nightwatchConfig","test_settings","default","selenium_host","selenium_port","logger","log","_","forEach","functionsIn","command","arr","startCase","split","unshift","cmd","join","file","path","normalize","debug","fs","writeFileSync"],"mappings":";;AAEA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,IAAMA,uBAAuB,SAAvBA,oBAAuB,CAACC,SAAD;AAAA,skBAiBbA,SAjBa,2zBA8CVA,SA9CU;AAAA,CAA7B;AAwDAC,OAAOC,OAAP,GAAiB,YAAM;AACrB,MAAMC,OAAOC,gBACVC,KADU,CACJ,yBADI,EAEVC,MAFU,CAEH,QAFG,EAEO;AAChBC,WAAO,GADS;AAEhBC,cAAU,+DAFM;AAGhBC,YAAQ;AAHQ,GAFP,EAOVC,IAPU,CAOL,MAPK,EAQVP,IARH;;AAUA,MAAMQ,SAASR,KAAKQ,MAApB;;AAEA,MAAMC,KAAK,IAAIC,aAAJ,CAAc,kBAClBC,mBAASC,gBAAT,CAA0BC,aAA1B,CAAwCC,OAAxC,CAAgDC,aAD9B,WAEjBJ,mBAASC,gBAAT,CAA0BC,aAA1B,CAAwCC,OAAxC,CAAgDE,aAF/B,CAAd,CAAX;;AAIAC,mBAAOC,GAAP,6DAAqEV,MAArE;;AAEAW,mBAAEC,OAAF,CAAUD,iBAAEE,WAAF,CAAcZ,EAAd,CAAV,EAA6B,UAACa,OAAD,EAAa;AACxC,QAAMC,MAAMJ,iBAAEK,SAAF,CAAYF,OAAZ,EAAqBG,KAArB,CAA2B,GAA3B,CAAZ;AACAF,QAAIG,OAAJ,CAAY,IAAZ;AACA,QAAMC,MAAMJ,IAAIK,IAAJ,CAAS,EAAT,CAAZ;AACA,QAAMC,OAAOC,eAAKC,SAAL,CAAkBvB,MAAlB,SAA4BmB,GAA5B,SAAb;;AAEAV,qBAAOe,KAAP,eAAyBL,GAAzB,sBAA6CL,OAA7C;AACAW,iBAAGC,aAAH,CAAiBL,IAAjB,EAAuBjC,qBAAqB0B,OAArB,CAAvB;AACD,GARD;AASD,CA5BD","file":"owl.js","sourcesContent":["\n\nimport yargs from \"yargs\";\nimport { Webdriver } from \"wd\";\nimport _ from \"lodash\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport settings from \"./settings\";\nimport logger from \"./util/logger\";\n\n/* eslint-disable max-len */\nconst createCommandContent = (wdcommand) => `\n'use strict';\n\nvar wd = require('wd');\nvar _ = require('lodash');\nvar util = require(\"util\");\nvar BaseCommand = require(\"testarmada-nightwatch-extra/lib/base-mobile-command\");\nvar settings = require(\"testarmada-nightwatch-extra/lib/settings\");\n\nvar MAX_TIMEOUT = settings.COMMAND_MAX_TIMEOUT;\nvar WAIT_INTERVAL = settings.WAIT_INTERVAL;\n\nvar Element = function Element(nightwatch) {\n\n  BaseCommand.call(this, nightwatch);\n\n  this.asyncwd = wd.remote(this.client.options.selenium_host, this.client.options.selenium_port, 'async');\n  this.cmd = '${wdcommand}';\n};\n\nutil.inherits(Element, BaseCommand);\n\nElement.prototype.command = function (...args) {\n  let cb = null;\n  const wdArguments = _.values(arguments);\n\n  if (arguments.length > 0) {\n    cb = arguments[arguments.length - 1];\n    // trim arguments if last argument isn't callback\n\n    if (typeof cb === 'function') {\n      this.cb = cb;\n      // remove last argument \n      delete wdArguments[arguments.length - 1];\n    }\n  }\n\n  this.successMessage = '[wd command {' + this.cmd + '}] is successful after %d milliseconds.';\n  this.failureMessage = '[wd command {' + this.cmd + '}] wasn\\\\'t successful after %d milliseconds.';\n\n  this.startTime = new Date().getTime();\n\n  this.asyncwd.attach(this.client.sessionId, (err, cap) => {\n    if (err) {\n      this.fail(err);\n    }\n    this.asyncwd.${wdcommand}.apply(this.asyncwd, _.flatten([wdArguments, (err, actual) => {\n      !!err === true ? this.fail(err) : this.pass(actual);\n    }]));\n  });\n\n  return this;\n};\n\nmodule.exports = Element;\n`;\nmodule.exports = () => {\n  const argv = yargs\n    .usage(\"Usage: $0 --output path\")\n    .option(\"output\", {\n      alias: \"o\",\n      describe: \"Location where owl writes nightwatch compatible wd command to\",\n      demand: true\n    })\n    .help(\"help\")\n    .argv;\n\n  const output = argv.output;\n\n  const wd = new Webdriver(`http://`\n    + `${settings.nightwatchConfig.test_settings.default.selenium_host}`\n    + `:${settings.nightwatchConfig.test_settings.default.selenium_port}`);\n\n  logger.log(`All nightwatch compatible wd commands will be saved to ${output}`);\n\n  _.forEach(_.functionsIn(wd), (command) => {\n    const arr = _.startCase(command).split(\" \");\n    arr.unshift(\"wd\");\n    const cmd = arr.join(\"\");\n    const file = path.normalize(`${output}/${cmd}.js`);\n\n    logger.debug(`Creating ${cmd}.js for wd's [${command}]`);\n    fs.writeFileSync(file, createCommandContent(command));\n  });\n};\n"]}