"use strict";

var _ = require("lodash");
var path = require("path");
var logger = require("./util/logger").default;

// load default plugins
var appium = require("./plugins/appium");
var dictionary = require("./plugins/dictionary");

var plugins = [appium, dictionary];

module.exports = {
  before: function before(callback) {
    var _this = this;

    var userPlugins = this.test_settings.plugins;

    // load default plugin
    _.forEach(plugins, function (p) {
      logger.log("Found default plugin " + p.name);
    });

    if (userPlugins) {
      if (!_.isArray(userPlugins)) {
        logger.warn("Plugins in nightwatch.json must be an array");
      } else {
        // prepare plugins if defined in nightwatch.json
        _.forEach(userPlugins, function (p) {
          try {
            var pg = require(path.resolve(process.cwd(), p));
            logger.log("Found plugin " + pg.name);
            plugins.push(pg);
          } catch (e) {
            logger.err("Error in loading plugin: " + e + ", current plugin will be ignored. " + "Please make sure it's configured correctly in nightwatch.json");
          }
        });
      }
    }

    Promise.all(_.map(plugins, function (plugin) {

      if (plugin.before) {
        // we wrap rejection in plugin here
        return plugin.before(_this).then(function () {
          return Promise.resolve();
        }).catch(function (err) {
          logger.err("[" + plugin.name + "] Error in plugin.before: " + err);
          // we eat error here
          throw err;
        });
      }
      return null;
    })).then(function () {
      return callback();
    }).catch(function (err) {
      // patch to error out test due to nightwatch implementation that continues test execution
      // if error happens in hooks
      logger.err("Test process is terminated with exit code 10 due to " + err);
      process.exit(10);
    });
  },
  after: function after(callback) {
    var _this2 = this;

    Promise.all(_.map(plugins, function (plugin) {
      if (plugin.after) {
        // we wrap rejection in plugin here
        return plugin.after(_this2).then(function () {
          return Promise.resolve();
        }).catch(function (err) {
          logger.err("[" + plugin.name + "] Error in plugin.after: " + err);
          // we eat error here
          return Promise.resolve();
        });
      }
      return null;
    })).then(function () {
      return callback();
    }).catch(function (err) {
      // patch to error out test due to nightwatch implementation that continues test execution
      // if error happens in hooks
      logger.err("Test process is terminated with exit code 10 due to " + err);
      process.exit(10);
    });
  },
  beforeEach: function beforeEach(client, callback) {
    var _this3 = this;

    Promise.all(_.map(plugins, function (plugin) {
      if (plugin.beforeEach) {
        // we wrap rejection in plugin here
        return plugin.beforeEach(_this3, client).then(function () {
          return Promise.resolve();
        }).catch(function (err) {
          logger.err("[" + plugin.name + "] Error in plugin.beforeEach: " + err);
          // we eat error here
          return Promise.resolve();
        });
      }
      return null;
    })).then(function () {
      return callback();
    }).catch(function (err) {
      // patch to error out test due to nightwatch implementation that continues test execution
      // if error happens in hooks
      logger.err("Test process is terminated with exit code 10 due to " + err);
      process.exit(10);
    });
  },
  afterEach: function afterEach(client, callback) {
    var _this4 = this;

    Promise.all(_.map(plugins, function (plugin) {
      if (plugin.afterEach) {
        // we wrap rejection in plugin here
        return plugin.afterEach(_this4, client).then(function () {
          return Promise.resolve();
        }).catch(function (err) {
          logger.err("[" + plugin.name + "] Error in plugin.afterEach for: " + err);
          // we eat error here
          return Promise.resolve();
        });
      }
      return null;
    })).then(function () {
      return callback();
    }).catch(function (err) {
      // patch to error out test due to nightwatch implementation that continues test execution
      // if error happens in hooks
      logger.err("Test process is terminated with exit code 10 due to " + err);
      process.exit(10);
    });
  }
};
//# sourceMappingURL=globals.js.map