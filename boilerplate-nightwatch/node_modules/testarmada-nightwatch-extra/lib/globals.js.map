{"version":3,"sources":["../src/globals.js"],"names":["_","require","path","logger","default","appium","dictionary","plugins","module","exports","before","callback","userPlugins","test_settings","forEach","p","log","name","isArray","warn","pg","resolve","process","cwd","push","e","err","Promise","all","map","plugin","then","catch","exit","after","beforeEach","client","afterEach"],"mappings":"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","file":"globals.js","sourcesContent":["const _ = require(\"lodash\");\nconst path = require(\"path\");\nconst logger = require(\"./util/logger\").default;\n\n// load default plugins\nconst appium = require(\"./plugins/appium\");\nconst dictionary = require(\"./plugins/dictionary\");\n\nconst plugins = [appium, dictionary];\n\nmodule.exports = {\n\n  before(callback) {\n    const userPlugins = this.test_settings.plugins;\n\n    // load default plugin\n    _.forEach(plugins, (p) => {\n      logger.log(`Found default plugin ${p.name}`);\n    });\n\n    if (userPlugins) {\n      if (!_.isArray(userPlugins)) {\n        logger.warn(\"Plugins in nightwatch.json must be an array\");\n\n      } else {\n        // prepare plugins if defined in nightwatch.json\n        _.forEach(userPlugins, (p) => {\n          try {\n            const pg = require(path.resolve(process.cwd(), p));\n            logger.log(`Found plugin ${pg.name}`);\n            plugins.push(pg);\n          } catch (e) {\n            logger.err(`Error in loading plugin: ${e}, current plugin will be ignored. ` +\n              `Please make sure it's configured correctly in nightwatch.json`);\n          }\n        });\n      }\n    }\n\n    Promise\n      .all(_.map(plugins, (plugin) => {\n\n        if (plugin.before) {\n          // we wrap rejection in plugin here\n          return plugin\n            .before(this)\n            .then(() => Promise.resolve())\n            .catch((err) => {\n              logger.err(`[${plugin.name}] Error in plugin.before: ${err}`);\n              // we eat error here\n              throw err;\n            });\n        }\n        return null;\n      }))\n      .then(() => callback())\n      .catch(err => {\n        // patch to error out test due to nightwatch implementation that continues test execution\n        // if error happens in hooks\n        logger.err(`Test process is terminated with exit code 10 due to ${err}`);\n        process.exit(10);\n      });\n  },\n\n  after(callback) {\n    Promise\n      .all(_.map(plugins, (plugin) => {\n        if (plugin.after) {\n          // we wrap rejection in plugin here\n          return plugin\n            .after(this)\n            .then(() => Promise.resolve())\n            .catch((err) => {\n              logger.err(`[${plugin.name}] Error in plugin.after: ${err}`);\n              // we eat error here\n              return Promise.resolve();\n            });\n        }\n        return null;\n      }))\n      .then(() => callback())\n      .catch(err => {\n        // patch to error out test due to nightwatch implementation that continues test execution\n        // if error happens in hooks\n        logger.err(`Test process is terminated with exit code 10 due to ${err}`);\n        process.exit(10);\n      });\n  },\n\n  beforeEach(client, callback) {\n    Promise\n      .all(_.map(plugins, (plugin) => {\n        if (plugin.beforeEach) {\n          // we wrap rejection in plugin here\n          return plugin\n            .beforeEach(this, client)\n            .then(() => Promise.resolve())\n            .catch((err) => {\n              logger.err(`[${plugin.name}] Error in plugin.beforeEach: ${err}`);\n              // we eat error here\n              return Promise.resolve();\n            });\n        }\n        return null;\n      }))\n      .then(() => callback())\n      .catch(err => {\n        // patch to error out test due to nightwatch implementation that continues test execution\n        // if error happens in hooks\n        logger.err(`Test process is terminated with exit code 10 due to ${err}`);\n        process.exit(10);\n      });\n  },\n\n  afterEach(client, callback) {\n    Promise\n      .all(_.map(plugins, (plugin) => {\n        if (plugin.afterEach) {\n          // we wrap rejection in plugin here\n          return plugin\n            .afterEach(this, client)\n            .then(() => Promise.resolve())\n            .catch((err) => {\n              logger.err(`[${plugin.name}] Error in plugin.afterEach for: ${err}`);\n              // we eat error here\n              return Promise.resolve();\n            });\n        }\n        return null;\n      }))\n      .then(() => callback())\n      .catch(err => {\n        // patch to error out test due to nightwatch implementation that continues test execution\n        // if error happens in hooks\n        logger.err(`Test process is terminated with exit code 10 due to ${err}`);\n        process.exit(10);\n      });\n  }\n};\n"]}