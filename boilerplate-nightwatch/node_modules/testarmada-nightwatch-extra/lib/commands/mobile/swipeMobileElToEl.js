"use strict";

var _util = require("util");

var _util2 = _interopRequireDefault(_util);

var _baseMobileCommand = require("../../base-mobile-command");

var _baseMobileCommand2 = _interopRequireDefault(_baseMobileCommand);

var _settings = require("../../settings");

var _settings2 = _interopRequireDefault(_settings);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SwipeMobileElToEl = function SwipeMobileElToEl() {
  var nightwatch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

  _baseMobileCommand2.default.call(this, nightwatch);
  this.cmd = "swipemobileeltoel";
};

_util2.default.inherits(SwipeMobileElToEl, _baseMobileCommand2.default);

SwipeMobileElToEl.prototype.do = function (value) {
  var self = this;
  var client = self.client.api;

  // Get location of element 2, then drag element1 to element2
  client.getMobileEl(self.using2, self.selector2, function (result) {
    var elementId2 = result.ELEMENT;

    var options = {
      path: "/session/" + self.client.sessionId + "/touch/perform",
      method: "POST",
      data: {
        "actions": [{ "action": "press", "options": { "element": value.ELEMENT } }, { "action": "wait", "options": { "ms": 800 } }, { "action": "moveTo", "options": { 'element': elementId2 } }, { "action": "release", "options": {} }]
      }
    };

    self.protocol(options, function (result) {
      if (result.status === 0) {
        self.pass({
          actual: result.value
        });
      } else {
        self.fail({
          code: _settings2.default.FAILURE_REASONS.BUILTIN_ELEMENT_NOT_OPERABLE,
          message: self.failureMessage
        });
      }
    });
  });
};

/*eslint max-params:["error", 5] */
SwipeMobileElToEl.prototype.command = function (using, selector, using2, selector2, cb) {
  this.selector = selector;
  this.using = using;
  this.selector2 = selector2;
  this.using2 = using2;
  this.cb = cb;

  this.successMessage = "Selector '" + this.using + ":" + this.selector + "' " + ("was swiped to selector '" + this.using2 + ":" + this.selector2 + "' after %d milliseconds.");
  this.failureMessage = "Selector '" + this.using + ":" + this.selector + "' " + ("was not swiped to selector '" + this.using2 + ":" + this.selector2 + "' after %d milliseconds.");

  this.startTime = new Date().getTime();

  // Track how many times selector is successfully checked by /element protocol
  this.seenCount = 0;
  this.checkConditions();

  return this;
};

module.exports = SwipeMobileElToEl;
//# sourceMappingURL=swipeMobileElToEl.js.map