{"version":3,"sources":["../../src/assertions/elValueContains.js"],"names":["ElValueContains","nightwatch","customizedSettings","BaseAssertion","call","cmd","util","inherits","prototype","assert","actual","expected","undefined","indexOf","RegExp","exec","fail","code","settings","FAILURE_REASONS","BUILTIN_ACTUAL_NOT_MEET_EXPECTED","pactual","message","pass","injectedJsCommand","$el","sizzle","command","selector","selectorUtil","normalize","format","startTime","Date","getTime","seenCount","decide","checkConditions","module","exports"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,kBAAkB,SAAlBA,eAAkB,GAAwD;AAAA,MAA9CC,UAA8C,uEAAjC,IAAiC;AAAA,MAA3BC,kBAA2B,uEAAN,IAAM;;AAC9EC,0BAAcC,IAAd,CAAmB,IAAnB,EAAyBH,UAAzB,EAAqCC,kBAArC;AACA,OAAKG,GAAL,GAAW,iBAAX;AACD,CAHD;;AAKAC,eAAKC,QAAL,CAAcP,eAAd,EAA+BG,uBAA/B;;AAEAH,gBAAgBQ,SAAhB,CAA0BC,MAA1B,GAAmC,UAAUC,MAAV,EAAkBC,QAAlB,EAA4B;AAC7D,MAAID,WAAW,IAAf,EAAqB;AACnB;AACA;AACA;AACA;AACA;AACAA,aAAS,EAAT;AACD;AACD,MAAIC,aAAaC,SAAb,IACCF,WAAWE,SADZ,IACyBF,OAAOG,OAAP,CAAeF,QAAf,IAA2B,CAA3B,IACxB,CAAC,IAAIG,MAAJ,CAAWH,QAAX,EAAqBI,IAArB,CAA0BL,MAA1B,CAFN,EAEyC;;AAEvC,SAAKM,IAAL,CAAU;AACRC,YAAMC,mBAASC,eAAT,CAAyBC,gCADvB;AAERC,eAASX,MAFD;AAGRC,wBAHQ;AAIRW,eAAS,KAAKA;AAJN,KAAV;AAMD,GAVD,MAUO;AACL,SAAKC,IAAL,CAAU;AACRF,eAASX,MADD;AAERC,wBAFQ;AAGRW,eAAS,KAAKA;AAHN,KAAV;AAKD;AACF,CA1BD;;AA4BA;AACAtB,gBAAgBQ,SAAhB,CAA0BgB,iBAA1B,GAA8C,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AACnE,SAAO,qBAAP;AACD,CAFD;;AAIA1B,gBAAgBQ,SAAhB,CAA0BmB,OAA1B,GAAoC,UAAUC,QAAV,EAAoBjB,QAApB,EAA8B;AAChE,OAAKiB,QAAL,GAAgBC,mBAAaC,SAAb,CAAuBF,QAAvB,CAAhB;AACA,OAAKjB,QAAL,GAAgBA,QAAhB;;AAEA,OAAKW,OAAL,GAAehB,eAAKyB,MAAL,CAAY,gEAAZ,EACb,KAAKH,QADQ,EACE,KAAKjB,QADP,CAAf;;AAGA,OAAKqB,SAAL,GAAkB,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EAAjB;;AAEA;AACA,OAAKC,SAAL,GAAiB,CAAjB;AACA,OAAKC,MAAL;AACA,OAAKC,eAAL;;AAEA,SAAO,IAAP;AACD,CAfD;;AAiBAC,OAAOC,OAAP,GAAiBvC,eAAjB","file":"elValueContains.js","sourcesContent":["import util from \"util\";\n\nimport selectorUtil from \"../util/selector\";\nimport BaseAssertion from \"../base-assertion\";\nimport settings from \"../settings\";\n\nconst ElValueContains = function (nightwatch = null, customizedSettings = null) {\n  BaseAssertion.call(this, nightwatch, customizedSettings);\n  this.cmd = \"elvaluecontains\";\n};\n\nutil.inherits(ElValueContains, BaseAssertion);\n\nElValueContains.prototype.assert = function (actual, expected) {\n  if (actual === null) {\n    // Per the spec, we should get the input's value content *or* an empty string\n    // https://www.w3.org/TR/2010/WD-html5-20101019/the-input-element.html#attr-input-value\n    // Versions of Microsoft Edge (14) will return `null` for empty inputs,\n    // so we fix to adhere to the spec.\n    // For elements that *aren't* inputs, value would be `undefined`.\n    actual = \"\";\n  }\n  if (expected === undefined\n    || actual === undefined || actual.indexOf(expected) < 0\n    && !new RegExp(expected).exec(actual)) {\n\n    this.fail({\n      code: settings.FAILURE_REASONS.BUILTIN_ACTUAL_NOT_MEET_EXPECTED,\n      pactual: actual,\n      expected,\n      message: this.message\n    });\n  } else {\n    this.pass({\n      pactual: actual,\n      expected,\n      message: this.message\n    });\n  }\n};\n\n/* eslint-disable */\nElValueContains.prototype.injectedJsCommand = function ($el, sizzle) {\n  return \"return $el[0].value\";\n}\n\nElValueContains.prototype.command = function (selector, expected) {\n  this.selector = selectorUtil.normalize(selector);\n  this.expected = expected;\n\n  this.message = util.format(\"Testing if selector <%s> has value <%s> after %d milliseconds \",\n    this.selector, this.expected);\n\n  this.startTime = (new Date()).getTime();\n\n  // Track how many times we've seen selector as :visible\n  this.seenCount = 0;\n  this.decide();\n  this.checkConditions();\n\n  return this;\n};\n\nmodule.exports = ElValueContains;\n"]}