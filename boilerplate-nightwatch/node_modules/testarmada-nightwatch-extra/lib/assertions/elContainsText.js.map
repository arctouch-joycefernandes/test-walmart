{"version":3,"sources":["../../src/assertions/elContainsText.js"],"names":["ElContainsText","nightwatch","customizedSettings","BaseAssertion","call","cmd","util","inherits","prototype","assert","actual","expected","pactual","replace","undefined","indexOf","RegExp","exec","fail","code","settings","FAILURE_REASONS","BUILTIN_ACTUAL_NOT_MEET_EXPECTED","message","pass","injectedJsCommand","$el","sizzle","command","selector","selectorUtil","normalize","format","startTime","Date","getTime","seenCount","decide","checkConditions","module","exports"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,iBAAiB,SAAjBA,cAAiB,GAAwD;AAAA,MAA9CC,UAA8C,uEAAjC,IAAiC;AAAA,MAA3BC,kBAA2B,uEAAN,IAAM;;AAC7EC,0BAAcC,IAAd,CAAmB,IAAnB,EAAyBH,UAAzB,EAAqCC,kBAArC;AACA,OAAKG,GAAL,GAAW,gBAAX;AACD,CAHD;;AAKAC,eAAKC,QAAL,CAAcP,cAAd,EAA8BG,uBAA9B;;AAEAH,eAAeQ,SAAf,CAAyBC,MAAzB,GAAkC,UAAUC,MAAV,EAAkBC,QAAlB,EAA4B;AAC5D,MAAMC,UAAUF,OAAOG,OAAP,CAAe,WAAf,EAA4B,GAA5B,CAAhB;;AAEA,MAAIF,aAAaG,SAAb,IAA0BF,QAAQG,OAAR,CAAgBJ,QAAhB,IAA4B,CAA5B,IACzB,CAAC,IAAIK,MAAJ,CAAWL,QAAX,EAAqBM,IAArB,CAA0BL,OAA1B,CADN,EAC0C;AACxC,SAAKM,IAAL,CAAU;AACRC,YAAMC,mBAASC,eAAT,CAAyBC,gCADvB;AAERV,sBAFQ;AAGRD,wBAHQ;AAIRY,eAAS,KAAKA;AAJN,KAAV;AAMD,GARD,MAQO;AACL,SAAKC,IAAL,CAAU;AACRZ,sBADQ;AAERD,wBAFQ;AAGRY,eAAS,KAAKA;AAHN,KAAV;AAKD;AACF,CAlBD;;AAoBA;AACAvB,eAAeQ,SAAf,CAAyBiB,iBAAzB,GAA6C,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AAClE,SAAO,4BAAP;AACD,CAFD;;AAIA3B,eAAeQ,SAAf,CAAyBoB,OAAzB,GAAmC,UAAUC,QAAV,EAAoBlB,QAApB,EAA8B;AAC/D,OAAKkB,QAAL,GAAgBC,mBAAaC,SAAb,CAAuBF,QAAvB,CAAhB;AACA,OAAKlB,QAAL,GAAgBA,QAAhB;;AAEA,OAAKY,OAAL,GAAejB,eAAK0B,MAAL,CAAY,mEAAZ,EACb,KAAKH,QADQ,EACE,KAAKlB,QADP,CAAf;;AAGA,OAAKsB,SAAL,GAAkB,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EAAjB;;AAEA;AACA,OAAKC,SAAL,GAAiB,CAAjB;AACA,OAAKC,MAAL;AACA,OAAKC,eAAL;;AAEA,SAAO,IAAP;AACD,CAfD;;AAiBAC,OAAOC,OAAP,GAAiBxC,cAAjB","file":"elContainsText.js","sourcesContent":["import util from \"util\";\n\nimport selectorUtil from \"../util/selector\";\nimport BaseAssertion from \"../base-assertion\";\nimport settings from \"../settings\";\n\nconst ElContainsText = function (nightwatch = null, customizedSettings = null) {\n  BaseAssertion.call(this, nightwatch, customizedSettings);\n  this.cmd = \"elcontainstext\";\n};\n\nutil.inherits(ElContainsText, BaseAssertion);\n\nElContainsText.prototype.assert = function (actual, expected) {\n  const pactual = actual.replace(/[\\s|\\n]+/g, \" \");\n\n  if (expected === undefined || pactual.indexOf(expected) < 0\n    && !new RegExp(expected).exec(pactual)) {\n    this.fail({\n      code: settings.FAILURE_REASONS.BUILTIN_ACTUAL_NOT_MEET_EXPECTED,\n      pactual,\n      expected,\n      message: this.message\n    });\n  } else {\n    this.pass({\n      pactual,\n      expected,\n      message: this.message\n    });\n  }\n};\n\n/* eslint-disable */\nElContainsText.prototype.injectedJsCommand = function ($el, sizzle) {\n  return \"return sizzle.getText($el)\";\n};\n\nElContainsText.prototype.command = function (selector, expected) {\n  this.selector = selectorUtil.normalize(selector);\n  this.expected = expected;\n\n  this.message = util.format(\"Testing if selector <%s> contains text <%s> after %d milliseconds\",\n    this.selector, this.expected);\n\n  this.startTime = (new Date()).getTime();\n\n  // Track how many times we've seen selector as :visible\n  this.seenCount = 0;\n  this.decide();\n  this.checkConditions();\n\n  return this;\n};\n\nmodule.exports = ElContainsText;\n"]}