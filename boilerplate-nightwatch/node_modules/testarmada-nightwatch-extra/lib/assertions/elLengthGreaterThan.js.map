{"version":3,"sources":["../../src/assertions/elLengthGreaterThan.js"],"names":["ElLengthGreaterThan","nightwatch","customizedSettings","BaseAssertion","call","cmd","util","inherits","prototype","assert","actual","expected","undefined","fail","code","settings","FAILURE_REASONS","BUILTIN_ACTUAL_NOT_MEET_EXPECTED","pactual","message","pass","injectedJsCommand","$el","sizzle","ret","selectUsing","command","selector","selectorUtil","normalize","format","startTime","Date","getTime","seenCount","decide","checkConditions","module","exports"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,sBAAsB,SAAtBA,mBAAsB,GAAwD;AAAA,MAA9CC,UAA8C,uEAAjC,IAAiC;AAAA,MAA3BC,kBAA2B,uEAAN,IAAM;;AAClFC,0BAAcC,IAAd,CAAmB,IAAnB,EAAyBH,UAAzB,EAAqCC,kBAArC;AACA,OAAKG,GAAL,GAAW,qBAAX;AACD,CAHD;;AAKAC,eAAKC,QAAL,CAAcP,mBAAd,EAAmCG,uBAAnC;;AAEAH,oBAAoBQ,SAApB,CAA8BC,MAA9B,GAAuC,UAAUC,MAAV,EAAkBC,QAAlB,EAA4B;AACjE,MAAIA,aAAaC,SAAb,IAA0BF,UAAUC,QAAxC,EAAkD;AAChD,SAAKE,IAAL,CAAU;AACRC,YAAMC,mBAASC,eAAT,CAAyBC,gCADvB;AAERC,eAASR,MAFD;AAGRC,wBAHQ;AAIRQ,eAAS,KAAKA;AAJN,KAAV;AAMD,GAPD,MAOO;AACL,SAAKC,IAAL,CAAU;AACRF,eAASR,MADD;AAERC,wBAFQ;AAGRQ,eAAS,KAAKA;AAHN,KAAV;AAKD;AACF,CAfD;;AAiBA;AACAnB,oBAAoBQ,SAApB,CAA8Ba,iBAA9B,GAAkD,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AACvE,MAAIC,MAAM,EAAV;AACA,UAAQ,KAAKC,WAAb;AACE,SAAK,OAAL;AACED,YAAM,6BAAN;AACA;AACF,SAAK,MAAL;AACEA,YAAM,oCAAN;AACA;AACF,SAAK,MAAL;AACEA,YAAM,iCAAN;AACA;AACF,SAAK,QAAL;AACEA,YAAM,oBAAN;AACA;AAZJ;AAcA,SAAOA,GAAP;AACD,CAjBD;;AAmBAxB,oBAAoBQ,SAApB,CAA8BkB,OAA9B,GAAwC,UAAUC,QAAV,EAAoBF,WAApB,EAAiCd,QAAjC,EAA2C;AACjF,OAAKgB,QAAL,GAAgBC,mBAAaC,SAAb,CAAuBF,QAAvB,CAAhB;AACA,OAAKF,WAAL,GAAmBA,WAAnB;AACA,OAAKd,QAAL,GAAgBA,QAAhB;;AAEA,OAAKQ,OAAL,GAAeb,eAAKwB,MAAL,CAAY,4EAAZ,EACb,KAAKH,QADQ,EACE,KAAKhB,QADP,CAAf;;AAGA,OAAKoB,SAAL,GAAkB,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EAAjB;;AAEA;AACA,OAAKC,SAAL,GAAiB,CAAjB;AACA,OAAKC,MAAL;AACA,OAAKC,eAAL;;AAEA,SAAO,IAAP;AACD,CAhBD;;AAkBAC,OAAOC,OAAP,GAAiBtC,mBAAjB","file":"elLengthGreaterThan.js","sourcesContent":["import util from \"util\";\n\nimport selectorUtil from \"../util/selector\";\nimport BaseAssertion from \"../base-assertion\";\nimport settings from \"../settings\";\n\nconst ElLengthGreaterThan = function (nightwatch = null, customizedSettings = null) {\n  BaseAssertion.call(this, nightwatch, customizedSettings);\n  this.cmd = \"ellengthgreaterthan\";\n};\n\nutil.inherits(ElLengthGreaterThan, BaseAssertion);\n\nElLengthGreaterThan.prototype.assert = function (actual, expected) {\n  if (expected === undefined || actual <= expected) {\n    this.fail({\n      code: settings.FAILURE_REASONS.BUILTIN_ACTUAL_NOT_MEET_EXPECTED,\n      pactual: actual,\n      expected,\n      message: this.message\n    });\n  } else {\n    this.pass({\n      pactual: actual,\n      expected,\n      message: this.message\n    });\n  }\n};\n\n/* eslint-disable */\nElLengthGreaterThan.prototype.injectedJsCommand = function ($el, sizzle) {\n  let ret = \"\";\n  switch (this.selectUsing) {\n    case \"value\":\n      ret = \"return $el[0].value.length;\";\n      break;\n    case \"text\":\n      ret = \"return sizzle.getText($el).length;\";\n      break;\n    case \"html\":\n      ret = \"return $el[0].innerHTML.length;\";\n      break;\n    case \"length\":\n      ret = \"return $el.length;\";\n      break;\n  }\n  return ret;\n}\n\nElLengthGreaterThan.prototype.command = function (selector, selectUsing, expected) {\n  this.selector = selectorUtil.normalize(selector);\n  this.selectUsing = selectUsing;\n  this.expected = expected;\n\n  this.message = util.format(\"Testing if selector <%s> length is greater than <%s> after %d milliseconds\",\n    this.selector, this.expected);\n\n  this.startTime = (new Date()).getTime();\n\n  // Track how many times we've seen selector as :visible\n  this.seenCount = 0;\n  this.decide();\n  this.checkConditions();\n\n  return this;\n};\n\nmodule.exports = ElLengthGreaterThan;\n"]}