{"version":3,"sources":["../../src/assertions/elNotContainsText.js"],"names":["ElNotContainsText","nightwatch","customizedSettings","BaseAssertion","call","cmd","util","inherits","prototype","assert","actual","expected","undefined","indexOf","RegExp","exec","pass","pactual","message","fail","code","settings","FAILURE_REASONS","BUILTIN_ACTUAL_NOT_MEET_EXPECTED","injectedJsCommand","$el","sizzle","command","selector","selectorUtil","normalize","format","startTime","Date","getTime","seenCount","decide","checkConditions","module","exports"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,oBAAoB,SAApBA,iBAAoB,GAAwD;AAAA,MAA9CC,UAA8C,uEAAjC,IAAiC;AAAA,MAA3BC,kBAA2B,uEAAN,IAAM;;AAChFC,0BAAcC,IAAd,CAAmB,IAAnB,EAAyBH,UAAzB,EAAqCC,kBAArC;AACA,OAAKG,GAAL,GAAW,mBAAX;AACD,CAHD;;AAKAC,eAAKC,QAAL,CAAcP,iBAAd,EAAiCG,uBAAjC;;AAEAH,kBAAkBQ,SAAlB,CAA4BC,MAA5B,GAAqC,UAAUC,MAAV,EAAkBC,QAAlB,EAA4B;AAC/D,MAAIA,aAAaC,SAAb,IACCF,OAAOG,OAAP,CAAeF,QAAf,IAA2B,CAD5B,IAEC,CAAC,IAAIG,MAAJ,CAAWH,QAAX,EAAqBI,IAArB,CAA0BL,MAA1B,CAFN,EAEyC;AACvC,SAAKM,IAAL,CAAU;AACRC,eAASP,MADD;AAERC,wBAFQ;AAGRO,eAAS,KAAKA;AAHN,KAAV;AAKD,GARD,MAQO;AACL,SAAKC,IAAL,CAAU;AACRC,YAAMC,mBAASC,eAAT,CAAyBC,gCADvB;AAERN,eAASP,MAFD;AAGRC,wBAHQ;AAIRO,eAAS,KAAKA;AAJN,KAAV;AAMD;AACF,CAjBD;;AAmBA;AACAlB,kBAAkBQ,SAAlB,CAA4BgB,iBAA5B,GAAgD,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AACrE,SAAO,4BAAP;AACD,CAFD;;AAIA1B,kBAAkBQ,SAAlB,CAA4BmB,OAA5B,GAAsC,UAAUC,QAAV,EAAoBjB,QAApB,EAA8B;AAClE,OAAKiB,QAAL,GAAgBC,mBAAaC,SAAb,CAAuBF,QAAvB,CAAhB;AACA,OAAKjB,QAAL,GAAgBA,QAAhB;;AAEA,OAAKO,OAAL,GAAeZ,eAAKyB,MAAL,CAAY,6EAAZ,EACb,KAAKH,QADQ,EACE,KAAKjB,QADP,CAAf;;AAGA,OAAKqB,SAAL,GAAkB,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EAAjB;;AAEA;AACA,OAAKC,SAAL,GAAiB,CAAjB;AACA,OAAKC,MAAL;AACA,OAAKC,eAAL;;AAEA,SAAO,IAAP;AACD,CAfD;;AAiBAC,OAAOC,OAAP,GAAiBvC,iBAAjB","file":"elNotContainsText.js","sourcesContent":["import util from \"util\";\n\nimport selectorUtil from \"../util/selector\";\nimport BaseAssertion from \"../base-assertion\";\nimport settings from \"../settings\";\n\nconst ElNotContainsText = function (nightwatch = null, customizedSettings = null) {\n  BaseAssertion.call(this, nightwatch, customizedSettings);\n  this.cmd = \"elnotcontainstext\";\n};\n\nutil.inherits(ElNotContainsText, BaseAssertion);\n\nElNotContainsText.prototype.assert = function (actual, expected) {\n  if (expected !== undefined\n    && actual.indexOf(expected) < 0\n    && !new RegExp(expected).exec(actual)) {\n    this.pass({\n      pactual: actual,\n      expected,\n      message: this.message\n    });\n  } else {\n    this.fail({\n      code: settings.FAILURE_REASONS.BUILTIN_ACTUAL_NOT_MEET_EXPECTED,\n      pactual: actual,\n      expected,\n      message: this.message\n    });\n  }\n};\n\n/* eslint-disable */\nElNotContainsText.prototype.injectedJsCommand = function ($el, sizzle) {\n  return \"return sizzle.getText($el)\";\n};\n\nElNotContainsText.prototype.command = function (selector, expected) {\n  this.selector = selectorUtil.normalize(selector);\n  this.expected = expected;\n\n  this.message = util.format(\"Testing if selector <%s> does not contains text <%s> after %d milliseconds \",\n    this.selector, this.expected);\n\n  this.startTime = (new Date()).getTime();\n\n  // Track how many times we've seen selector as :visible\n  this.seenCount = 0;\n  this.decide();\n  this.checkConditions();\n\n  return this;\n};\n\nmodule.exports = ElNotContainsText;\n"]}