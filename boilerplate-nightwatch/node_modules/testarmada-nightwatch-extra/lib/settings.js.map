{"version":3,"sources":["../src/settings.js"],"names":["buildSettings","DEFAULT_MAX_TIMEOUT","JS_MAX_TIMEOUT_OFFSET","FAILURE_REASONS","BUILTIN_BAD_GATEWAY","BUILTIN_SELECTOR_NOT_FOUND","BUILTIN_SELECTOR_NOT_VISIBLE","BUILTIN_SELENIUM_ERROR","BUILTIN_ATTRIBUTE_NOT_FOUND","BUILTIN_ELEMENT_NOT_OPERABLE","BUILTIN_COMMAND_TIMEOUT","BUILTIN_ACTUAL_NOT_MEET_EXPECTED","BUILTIN_COMMAND_NOT_SUPPORTED","getConfig","argv","configLocations","config","push","path","resolve","trim","triedConfs","nextConf","configPath","shift","configurationExtension","extname","nightwatchConfig","require","data","fs","readFileSync","JSON","parse","e","console","log","length","logger","err","forEach","confLocation","process","exit","screenshotPath","screenshot_path","timeoutValue","test_settings","default","max_timeout","jsTimeoutValue","syncModeBrowserList","globals","Array","isArray","env","WAIT_INTERVAL","JS_WAIT_INTERNAL","MOBILE_SEEN_MAX","SEEN_MAX","JS_SEEN_MAX","COMMAND_MAX_TIMEOUT","JS_MAX_TIMEOUT","isWorker","worker","verbose","sessionId","undefined","yargs","alias","settings"],"mappings":"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","file":"settings.js","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport yargs from \"yargs\";\nimport logger from \"./util/logger\";\n\nconst DEFAULT_MAX_TIMEOUT = 60000;\nconst JS_MAX_TIMEOUT_OFFSET = 5000;\nconst FAILURE_REASONS = {\n  BUILTIN_BAD_GATEWAY: \"BAD_GATEWAY\",\n  BUILTIN_SELECTOR_NOT_FOUND: \"SELECTOR_NOT_FOUND\",\n  BUILTIN_SELECTOR_NOT_VISIBLE: \"SELECTOR_NOT_VISIBLE\",\n  BUILTIN_SELENIUM_ERROR: \"SELENIUM_ERROR\",\n  BUILTIN_ATTRIBUTE_NOT_FOUND: \"ATTRIBUTE_NOT_FOUND\",\n  BUILTIN_ELEMENT_NOT_OPERABLE: \"ELEMENT_NOT_OPERABLE\",\n  BUILTIN_COMMAND_TIMEOUT: \"COMMAND_TIMEOUT\",\n  BUILTIN_ACTUAL_NOT_MEET_EXPECTED: \"ACTUAL_NOT_MEET_EXPECTED\",\n  BUILTIN_COMMAND_NOT_SUPPORTED: \"COMMAND_NOT_SUPPORTED\"\n};\n\nconst getConfig = function (argv) {\n  // Try a number of config locations, starting with an explicitly-overriden one, if it exists.\n  const configLocations = [];\n\n  // Configurable config location via arguments\n  if (argv.config) {\n    configLocations.push(path.resolve(argv.config.trim()));\n  }\n\n  // Classic config location / still used by some repos\n  configLocations.push(path.resolve(\"./nightwatch.json\"));\n\n  // The magellan boilerplate's default config location\n  configLocations.push(path.resolve(\"./conf/config.json\"));\n\n  // For unit test\n  configLocations.push(path.resolve(\"./tests/conf/nightwatch.json\"));\n\n  const triedConfs = [];\n\n  // Try a config location, if it fails, try another, and so on. If we run out of config locations\n  // to try, we exit with an error and indicate all the locations we tried\n  /*eslint consistent-return:0 */\n  const nextConf = function () {\n    const configPath = configLocations.shift();\n    const configurationExtension = path.extname(configPath);\n    triedConfs.push(configPath);\n\n    let nightwatchConfig;\n    try {\n      if (configurationExtension === '.js'){\n        nightwatchConfig = require(configPath);\n      } else {\n        const data = fs.readFileSync(configPath, \"utf8\");\n        nightwatchConfig = JSON.parse(data);\n      }\n    } catch (e) {\n      console.log(\"DEBUG: got exception: \" + e);\n      // Eat this exception because we handle the lack of data below\n    }\n\n    /* istanbul ignore if */\n    if (!nightwatchConfig) {\n      if (configLocations.length === 0) {\n        logger.err(\"nightwatch-extra has exhausted its \"\n          + \"search for nightwatch configuration file.\");\n        logger.err(\"Tried configuration locations:\");\n        triedConfs.forEach((confLocation) => logger.err(`  ${confLocation}`));\n        /*eslint no-process-exit:0 */\n        process.exit(1);\n      } else {\n        return nextConf();\n      }\n    } else {\n      logger.log(`Found nightwatch configuration at ${configPath}`);\n      return {\n        nightwatchConfig\n      };\n    }\n  };\n\n  return nextConf();\n};\n\nexport function buildSettings(argv) {\n  const config = getConfig(argv);\n\n  // Screenshot Output Control:\n  // Usage: --screenshots=path/to/temp/screenshot/directory\n  // This allows external test runners to set where screenshots from the\n  // screenshot() command will write their files.\n  const screenshotPath = argv.screenshot_path ?\n    path.resolve(argv.screenshot_path) : path.resolve(\"./temp\");\n\n  // Parameter for COMMAND_MAX_TIMEOUT\n  // This allows a config file to set it's own timeout value, will default to 60000\n  const timeoutValue = config.nightwatchConfig.test_settings.default.max_timeout\n    || DEFAULT_MAX_TIMEOUT;\n  const jsTimeoutValue = timeoutValue - JS_MAX_TIMEOUT_OFFSET;\n\n  // Switch for asynchronous js injection\n  // This allows to run asynchronous js injection for a faster element\n  // detection/operation in some browsers\n  let syncModeBrowserList = [\"iphone\", \"ipad\"];\n  if (config.nightwatchConfig.test_settings.default.globals\n    && Array.isArray(config.nightwatchConfig.test_settings.default.globals.syncModeBrowserList)) {\n    // if browser in sync mode is defined in nightwatch.json\n    syncModeBrowserList = config.nightwatchConfig.test_settings.default.globals.syncModeBrowserList;\n  }\n\n  const env = argv.env;\n\n  return {\n    WAIT_INTERVAL: 100,\n        JS_WAIT_INTERNAL: 100,\n    MOBILE_SEEN_MAX: 1,\n    SEEN_MAX: 3,\n    JS_SEEN_MAX: 3,\n    COMMAND_MAX_TIMEOUT: timeoutValue,\n    JS_MAX_TIMEOUT: jsTimeoutValue,\n\n    // true if test is launched by a specific runner other than nightwatch, such as magellan\n    isWorker: !!argv.worker,\n    env,\n    verbose: argv.verbose,\n\n    sessionId: undefined,\n\n    nightwatchConfig: config.nightwatchConfig,\n\n    screenshotPath,\n    syncModeBrowserList,\n\n    FAILURE_REASONS\n  };\n}\n\nconst argv = yargs\n  .alias(\"c\", \"config\")\n  .alias(\"v\", \"verbose\")\n  .argv;\nconst settings = buildSettings(argv);\n\nexport default settings;\n"]}