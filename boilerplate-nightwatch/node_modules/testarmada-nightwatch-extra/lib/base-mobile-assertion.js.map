{"version":3,"sources":["../src/base-mobile-assertion.js"],"names":["MAX_TIMEOUT","settings","COMMAND_MAX_TIMEOUT","WAIT_INTERVAL","SEEN_MAX","MOBILE_SEEN_MAX","Base","nightwatch","EventEmitter","call","startTime","time","totalTime","seleniumCallTime","executeAsyncTime","selector","successMessage","failureMessage","checkConditions","bind","client","util","inherits","prototype","protocol","options","cb","runProtocolAction","send","self","path","sessionId","method","data","using","value","result","status","seenCount","elapsed","Date","getTime","elapse","do","fail","code","FAILURE_REASONS","BUILTIN_SELECTOR_NOT_FOUND","setTimeout","pass","actual","expected","message","assertion","format","emit","pcode","pactual","pexpected","assert","command","module","exports"],"mappings":"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","file":"base-mobile-assertion.js","sourcesContent":["import EventEmitter from \"events\";\nimport util from \"util\";\n\nimport settings from \"./settings\";\n\n// Wait until we've seen a selector as :visible SEEN_MAX times, with a\n// wait for WAIT_INTERVAL milliseconds between each visibility test.\nconst MAX_TIMEOUT = settings.COMMAND_MAX_TIMEOUT;\nconst WAIT_INTERVAL = settings.WAIT_INTERVAL;\nconst SEEN_MAX = settings.MOBILE_SEEN_MAX;\n\nconst Base = function (nightwatch = null) {\n  EventEmitter.call(this);\n\n  this.startTime = 0;\n  this.time = {\n    totalTime: 0,\n    seleniumCallTime: 0,\n    executeAsyncTime: 0\n  };\n\n  this.selector = null;\n\n  this.successMessage = \"\";\n  this.failureMessage = \"\";\n\n  this.checkConditions = this.checkConditions.bind(this);\n  // for mock and unit test\n  if (nightwatch) {\n    this.client = nightwatch;\n  }\n};\n\nutil.inherits(Base, EventEmitter);\n\nBase.prototype.protocol = function (options, cb) {\n  this.client.runProtocolAction(options, cb).send();\n};\n\nBase.prototype.checkConditions = function () {\n  const self = this;\n\n  const options = {\n    path: `/session/${this.client.sessionId}/element`,\n    method: \"POST\",\n    data: {\n      using: this.using,\n      value: this.selector\n    }\n  };\n\n  self.protocol(options, (result) => {\n    if (result.status === 0) {\n      // sucessful\n      self.seenCount += 1;\n    }\n\n    const elapsed = (new Date()).getTime() - self.startTime;\n\n    if (self.seenCount >= SEEN_MAX || elapsed > MAX_TIMEOUT) {\n      if (self.seenCount >= SEEN_MAX) {\n        const elapse = (new Date()).getTime();\n        self.time.executeAsyncTime = elapse - self.startTime;\n        self.time.seleniumCallTime = 0;\n\n        self.do(result.value);\n      } else {\n        self.fail({ code: settings.FAILURE_REASONS.BUILTIN_SELECTOR_NOT_FOUND });\n      }\n    } else {\n      setTimeout(self.checkConditions, WAIT_INTERVAL);\n    }\n  });\n};\n\nBase.prototype.pass = function ({ actual, expected, message }) {\n  this.time.totalTime = (new Date()).getTime() - this.startTime;\n\n  this.client.assertion(true, actual, expected,\n    util.format(this.message, this.time.totalTime), true);\n  this.emit(\"complete\");\n};\n\n/*eslint max-params:[\"error\", 4] */\nBase.prototype.fail = function ({ code, actual, expected, message }) {\n  // if no code here we do nothing\n  const pcode = code ? code : \"\";\n\n  const pactual = actual || \"not visible\";\n  const pexpected = expected || \"visible\";\n  this.time.totalTime = (new Date()).getTime() - this.startTime;\n\n  this.client.assertion(false, pactual, pexpected,\n    util.format(`${this.message} [[${pcode}]]`, this.time.totalTime), true);\n  this.emit(\"complete\");\n};\n\n/**\n * All children have to implement do\n *\n */\n/* istanbul ignore next */\n/*eslint no-unused-vars:0 */\nBase.prototype.assert = function (actual, expected) { };\n\n/**\n * All children have to implement do\n *\n */\n/* istanbul ignore next */\n/*eslint no-unused-vars:0 */\nBase.prototype.do = function (value) { };\n\n/**\n * All children have to implement command\n *\n */\n/* istanbul ignore next */\n/*eslint no-unused-vars:0 */\nBase.prototype.command = function (using, selector, expected, cb) {\n  return this;\n};\n\nmodule.exports = Base;\n"]}