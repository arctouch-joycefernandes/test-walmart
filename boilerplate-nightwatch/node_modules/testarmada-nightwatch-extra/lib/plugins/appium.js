"use strict";

var _logger = require("../util/logger");

var _logger2 = _interopRequireDefault(_logger);

var _settings = require("../settings");

var _settings2 = _interopRequireDefault(_settings);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var name = "Appium Plugin";

module.exports = {
  name: name,

  /* eslint-disable camelcase */
  before: function before(globals) {
    var test_settings = globals.test_settings;

    return new Promise(function (resolve, reject) {
      if (test_settings.appium && test_settings.appium.start_process) {

        var loglevel = test_settings.appium.loglevel ? test_settings.appium.loglevel : "info";

        if (_settings2.default.verbose) {
          loglevel = "debug";
        }

        try {
          /*eslint-disable global-require*/
          var appium = require("appium/build/lib/main").main;
          var config = _lodash2.default.assign({}, _lodash2.default.omit(test_settings.appium, "start_process"), {
            throwInsteadOfExit: true,
            loglevel: loglevel,
            port: test_settings.selenium_port
          });

          _logger2.default.debug(JSON.stringify(config));

          return appium(config).then(function (server) {
            _logger2.default.log("[" + name + "] Appium server is launched");
            globals.appiumServer = server;

            return resolve();
          });
        } catch (e) {
          _logger2.default.err(name + "] Appium server isn't launched successfully, " + e);
          // where appium isnt found
          return reject(e);
        }
      } else {
        _logger2.default.log("[" + name + "] No appium is configured in nightwatch.json, skip appium start");
        return resolve();
      }
    });
  },

  after: function after(globals) {

    return new Promise(function (resolve, reject) {
      if (globals.appiumServer) {
        return globals.appiumServer.close().then(function () {
          globals.appiumServer = null;
          _logger2.default.log("[" + name + "] Appium server is stopped");
          return resolve();
        }).catch(function (err) {
          _logger2.default.err("[" + name + "] Appium server isn't stopped successfully, " + err);
          return reject(err);
        });
      } else {
        _logger2.default.log("[" + name + "] No appium is configured in nightwatch.json, skip appium stop");
        return resolve();
      }
    });
  }
};
//# sourceMappingURL=appium.js.map