{"version":3,"sources":["../../src/plugins/dictionary.js"],"names":["name","_lookUpInDictionary","msg","dictionary","fm","match","key","_","trim","explanation","replace","module","exports","before","globals","dictionaryLocation","builtinDictionary","require","Promise","resolve","reject","argv","path","process","cwd","env","NIGHTWATCH_ERROR_DICTIONARY","logger","log","shadowURL","url","parse","protocol","assign","href","debug","JSON","stringify","global","err","request","get","response","body","beforeEach","client","afterEach","forEach","currentTest","results","testcases","testcase","assertions","length","map","assertion","failure","fullMsg"],"mappings":"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","file":"dictionary.js","sourcesContent":["import logger from \"../util/logger\";\nimport { argv } from \"yargs\";\nimport request from \"request\";\nimport _ from \"lodash\";\nimport path from \"path\";\nimport url from \"url\";\n\nconst name = \"Error Dictionary Plugin\";\n\n\nconst _lookUpInDictionary = (msg, dictionary) => {\n  // strip error template and fill info from dictionary\n  const fm = msg.match(/\\[\\[\\w+\\]\\]/);\n\n  if (fm) {\n\n    const key = _.trim(fm[0], \"[]\");\n    const explanation = dictionary[key] || // from customized dictionary\n      dictionary[`BUILTIN_${key}`]; // from default dictionary\n\n    if (explanation) {\n      // entry found\n      if (typeof explanation === \"function\") {\n        return msg.replace(fm, explanation());\n      } else {\n        return msg.replace(fm, explanation);\n      }\n\n    }\n  }\n\n  // no entry found in dictionary\n  return msg;\n};\n\nmodule.exports = {\n  name,\n\n  /* eslint-disable global-require,no-magic-numbers*/\n  before: (globals) => {\n    // default location, in the source code\n    let dictionaryLocation = \"./nightwatch_dictionary.js\";\n    const builtinDictionary = require(dictionaryLocation);\n\n    return new Promise((resolve, reject) => {\n\n      if (argv.dictionary) {\n        dictionaryLocation = path.resolve(process.cwd(), argv.dictionary);\n\n      } else if (process.env.NIGHTWATCH_ERROR_DICTIONARY) {\n        dictionaryLocation = path.resolve(process.cwd(), process.env.NIGHTWATCH_ERROR_DICTIONARY);\n\n      }\n\n      logger.log(`[${name}] Found dictionary at ${dictionaryLocation}, loading dictionary`);\n\n      const shadowURL = url.parse(dictionaryLocation);\n\n      if (!shadowURL.protocol) {\n        // a file\n        try {\n          // merge builtin dictionary with customized dictionary\n          globals.dictionary = _.assign({}, builtinDictionary, require(shadowURL.href));\n          logger.debug(`[${name}] ${JSON.stringify(global.dictionary, null, 2)}`);\n          return resolve();\n        } catch (err) {\n\n          logger.err(`[${name}] Error in getting dictionary from ${shadowURL.href}, ${err}`);\n          return reject(err);\n        }\n\n      } else {\n        return request.get(shadowURL.href, (err, response, body) => {\n\n          if (err) {\n            logger.err(`[${name}] Error in getting dictionary from ${shadowURL.href}, ${err}`);\n            return reject(err);\n          }\n\n          globals.dictionary = _.assign({}, body);\n          logger.debug(`[${name}] ${JSON.stringify(global.dictionary, null, 2)}`);\n          return resolve();\n        });\n      }\n    });\n  },\n\n  /* eslint-disbale no-unused-vars */\n  beforeEach(globals, client) {\n    client.dictionary = globals.dictionary;\n\n    // const funcs = _.functions(client);\n\n    return new Promise((resolve) => {\n\n      // _.forEach(funcs, (func) => {\n      //   const originalFunc = client[func];\n\n      //   client[func] = function adaptorFn() {\n      //     // simple adaptor\n      //     const args = Array.prototype.slice.call(arguments);\n\n      //     return originalFunc.apply(client[func], args);\n      //   };\n      // });\n\n      return resolve();\n\n    });\n  },\n\n  afterEach(globals, client) {\n\n    return new Promise((resolve) => {\n\n      _.forEach(client.currentTest.results.testcases, (testcase) => {\n\n        if (testcase.assertions.length > 0) {\n          testcase.assertions = _.map(testcase.assertions, (assertion) => {\n\n            if (assertion.failure) {\n              // only scan failure assertion\n              assertion.fullMsg = _lookUpInDictionary(assertion.fullMsg, globals.dictionary);\n              assertion.failure = _lookUpInDictionary(assertion.failure, globals.dictionary);\n            }\n            return assertion;\n          });\n        }\n      });\n\n      return resolve();\n    });\n\n  }\n};\n"]}