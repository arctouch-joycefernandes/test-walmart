{"version":3,"sources":["../../src/plugins/appium.js"],"names":["name","module","exports","before","globals","test_settings","Promise","resolve","reject","appium","start_process","loglevel","settings","verbose","require","main","config","_","assign","omit","throwInsteadOfExit","port","selenium_port","logger","debug","JSON","stringify","then","server","log","appiumServer","e","err","after","close","catch"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,OAAO,eAAb;;AAEAC,OAAOC,OAAP,GAAiB;AACfF,YADe;;AAGf;AACAG,UAAQ,gBAACC,OAAD,EAAa;AACnB,QAAMC,gBAAgBD,QAAQC,aAA9B;;AAEA,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,UAAIH,cAAcI,MAAd,IAAwBJ,cAAcI,MAAd,CAAqBC,aAAjD,EAAgE;;AAE9D,YAAIC,WAAWN,cAAcI,MAAd,CAAqBE,QAArB,GACbN,cAAcI,MAAd,CAAqBE,QADR,GACmB,MADlC;;AAGA,YAAIC,mBAASC,OAAb,EAAsB;AACpBF,qBAAW,OAAX;AACD;;AAED,YAAI;AACF;AACA,cAAMF,SAASK,QAAQ,uBAAR,EAAiCC,IAAhD;AACA,cAAMC,SAASC,iBAAEC,MAAF,CAAS,EAAT,EACbD,iBAAEE,IAAF,CAAOd,cAAcI,MAArB,EAA6B,eAA7B,CADa,EAEb;AACEW,gCAAoB,IADtB;AAEET,8BAFF;AAGEU,kBAAMhB,cAAciB;AAHtB,WAFa,CAAf;;AAQAC,2BAAOC,KAAP,CAAaC,KAAKC,SAAL,CAAeV,MAAf,CAAb;;AAEA,iBAAOP,OAAOO,MAAP,EACJW,IADI,CACC,UAACC,MAAD,EAAY;AAChBL,6BAAOM,GAAP,OAAe7B,IAAf;AACAI,oBAAQ0B,YAAR,GAAuBF,MAAvB;;AAEA,mBAAOrB,SAAP;AACD,WANI,CAAP;AAOD,SApBD,CAoBE,OAAOwB,CAAP,EAAU;AACVR,2BAAOS,GAAP,CAAchC,IAAd,qDAAkE+B,CAAlE;AACA;AACA,iBAAOvB,OAAOuB,CAAP,CAAP;AACD;AACF,OAlCD,MAkCO;AACLR,yBAAOM,GAAP,OAAe7B,IAAf;AACA,eAAOO,SAAP;AACD;AACF,KAvCM,CAAP;AAwCD,GA/Cc;;AAiDf0B,SAAO,eAAC7B,OAAD,EAAa;;AAElB,WAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,UAAIJ,QAAQ0B,YAAZ,EAA0B;AACxB,eAAO1B,QAAQ0B,YAAR,CACJI,KADI,GAEJP,IAFI,CAEC,YAAM;AACVvB,kBAAQ0B,YAAR,GAAuB,IAAvB;AACAP,2BAAOM,GAAP,OAAe7B,IAAf;AACA,iBAAOO,SAAP;AACD,SANI,EAOJ4B,KAPI,CAOE,UAACH,GAAD,EAAS;AACdT,2BAAOS,GAAP,OAAehC,IAAf,oDAAkEgC,GAAlE;AACA,iBAAOxB,OAAOwB,GAAP,CAAP;AACD,SAVI,CAAP;AAWD,OAZD,MAYO;AACLT,yBAAOM,GAAP,OAAe7B,IAAf;AACA,eAAOO,SAAP;AACD;AACF,KAjBM,CAAP;AAkBD;AArEc,CAAjB","file":"appium.js","sourcesContent":["import logger from \"../util/logger\";\nimport settings from \"../settings\";\nimport _ from \"lodash\";\n\nconst name = \"Appium Plugin\";\n\nmodule.exports = {\n  name,\n\n  /* eslint-disable camelcase */\n  before: (globals) => {\n    const test_settings = globals.test_settings;\n\n    return new Promise((resolve, reject) => {\n      if (test_settings.appium && test_settings.appium.start_process) {\n\n        let loglevel = test_settings.appium.loglevel ?\n          test_settings.appium.loglevel : \"info\";\n\n        if (settings.verbose) {\n          loglevel = \"debug\";\n        }\n\n        try {\n          /*eslint-disable global-require*/\n          const appium = require(\"appium/build/lib/main\").main;\n          const config = _.assign({},\n            _.omit(test_settings.appium, \"start_process\"),\n            {\n              throwInsteadOfExit: true,\n              loglevel,\n              port: test_settings.selenium_port\n            });\n\n          logger.debug(JSON.stringify(config));\n\n          return appium(config)\n            .then((server) => {\n              logger.log(`[${name}] Appium server is launched`);\n              globals.appiumServer = server;\n\n              return resolve();\n            });\n        } catch (e) {\n          logger.err(`${name}] Appium server isn't launched successfully, ${e}`);\n          // where appium isnt found\n          return reject(e);\n        }\n      } else {\n        logger.log(`[${name}] No appium is configured in nightwatch.json, skip appium start`);\n        return resolve();\n      }\n    });\n  },\n\n  after: (globals) => {\n\n    return new Promise((resolve, reject) => {\n      if (globals.appiumServer) {\n        return globals.appiumServer\n          .close()\n          .then(() => {\n            globals.appiumServer = null;\n            logger.log(`[${name}] Appium server is stopped`);\n            return resolve();\n          })\n          .catch((err) => {\n            logger.err(`[${name}] Appium server isn't stopped successfully, ${err}`);\n            return reject(err);\n          });\n      } else {\n        logger.log(`[${name}] No appium is configured in nightwatch.json, skip appium stop`);\n        return resolve();\n      }\n    });\n  }\n};\n"]}