"use strict";

var _logger = require("../util/logger");

var _logger2 = _interopRequireDefault(_logger);

var _yargs = require("yargs");

var _request = require("request");

var _request2 = _interopRequireDefault(_request);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _url = require("url");

var _url2 = _interopRequireDefault(_url);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var name = "Error Dictionary Plugin";

var _lookUpInDictionary = function _lookUpInDictionary(msg, dictionary) {
  // strip error template and fill info from dictionary
  var fm = msg.match(/\[\[\w+\]\]/);

  if (fm) {

    var key = _lodash2.default.trim(fm[0], "[]");
    var explanation = dictionary[key] || // from customized dictionary
    dictionary["BUILTIN_" + key]; // from default dictionary

    if (explanation) {
      // entry found
      if (typeof explanation === "function") {
        return msg.replace(fm, explanation());
      } else {
        return msg.replace(fm, explanation);
      }
    }
  }

  // no entry found in dictionary
  return msg;
};

module.exports = {
  name: name,

  /* eslint-disable global-require,no-magic-numbers*/
  before: function before(globals) {
    // default location, in the source code
    var dictionaryLocation = "./nightwatch_dictionary.js";
    var builtinDictionary = require(dictionaryLocation);

    return new Promise(function (resolve, reject) {

      if (_yargs.argv.dictionary) {
        dictionaryLocation = _path2.default.resolve(process.cwd(), _yargs.argv.dictionary);
      } else if (process.env.NIGHTWATCH_ERROR_DICTIONARY) {
        dictionaryLocation = _path2.default.resolve(process.cwd(), process.env.NIGHTWATCH_ERROR_DICTIONARY);
      }

      _logger2.default.log("[" + name + "] Found dictionary at " + dictionaryLocation + ", loading dictionary");

      var shadowURL = _url2.default.parse(dictionaryLocation);

      if (!shadowURL.protocol) {
        // a file
        try {
          // merge builtin dictionary with customized dictionary
          globals.dictionary = _lodash2.default.assign({}, builtinDictionary, require(shadowURL.href));
          _logger2.default.debug("[" + name + "] " + JSON.stringify(global.dictionary, null, 2));
          return resolve();
        } catch (err) {

          _logger2.default.err("[" + name + "] Error in getting dictionary from " + shadowURL.href + ", " + err);
          return reject(err);
        }
      } else {
        return _request2.default.get(shadowURL.href, function (err, response, body) {

          if (err) {
            _logger2.default.err("[" + name + "] Error in getting dictionary from " + shadowURL.href + ", " + err);
            return reject(err);
          }

          globals.dictionary = _lodash2.default.assign({}, body);
          _logger2.default.debug("[" + name + "] " + JSON.stringify(global.dictionary, null, 2));
          return resolve();
        });
      }
    });
  },

  /* eslint-disbale no-unused-vars */
  beforeEach: function beforeEach(globals, client) {
    client.dictionary = globals.dictionary;

    // const funcs = _.functions(client);

    return new Promise(function (resolve) {

      // _.forEach(funcs, (func) => {
      //   const originalFunc = client[func];

      //   client[func] = function adaptorFn() {
      //     // simple adaptor
      //     const args = Array.prototype.slice.call(arguments);

      //     return originalFunc.apply(client[func], args);
      //   };
      // });

      return resolve();
    });
  },
  afterEach: function afterEach(globals, client) {

    return new Promise(function (resolve) {

      _lodash2.default.forEach(client.currentTest.results.testcases, function (testcase) {

        if (testcase.assertions.length > 0) {
          testcase.assertions = _lodash2.default.map(testcase.assertions, function (assertion) {

            if (assertion.failure) {
              // only scan failure assertion
              assertion.fullMsg = _lookUpInDictionary(assertion.fullMsg, globals.dictionary);
              assertion.failure = _lookUpInDictionary(assertion.failure, globals.dictionary);
            }
            return assertion;
          });
        }
      });

      return resolve();
    });
  }
};
//# sourceMappingURL=dictionary.js.map